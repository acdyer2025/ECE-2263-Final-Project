
Dyer_ECE2263FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a4  080073a4  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ac  080073ac  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080073b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000158  0800750c  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20000b90  0800750c  00020b90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bd6  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003040  00000000  00000000  00036d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00039da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018849  00000000  00000000  0003b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127a8  00000000  00000000  00054221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b277  00000000  00000000  000669c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1c40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  000f1c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000158 	.word	0x20000158
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007334 	.word	0x08007334

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000015c 	.word	0x2000015c
 80001d4:	08007334 	.word	0x08007334

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fc6e 	bl	8000db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f914 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fa0c 	bl	80008f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f9e0 	bl	80008a4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f006 facc 	bl	8006a80 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80004e8:	f000 f974 	bl	80007d4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80004ec:	f000 f9a6 	bl	800083c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


  HAL_Delay(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f000 fcd0 	bl	8000e98 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	4879      	ldr	r0, [pc, #484]	; (80006e4 <main+0x214>)
 80004fe:	f000 ff85 	bl	800140c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2102      	movs	r1, #2
 8000506:	4877      	ldr	r0, [pc, #476]	; (80006e4 <main+0x214>)
 8000508:	f000 ff80 	bl	800140c <HAL_GPIO_WritePin>

	  if(buttonState == 1)
 800050c:	4b76      	ldr	r3, [pc, #472]	; (80006e8 <main+0x218>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d11a      	bne.n	800054a <main+0x7a>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	2101      	movs	r1, #1
 8000518:	4872      	ldr	r0, [pc, #456]	; (80006e4 <main+0x214>)
 800051a:	f000 ff77 	bl	800140c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 800051e:	2201      	movs	r2, #1
 8000520:	2102      	movs	r1, #2
 8000522:	4870      	ldr	r0, [pc, #448]	; (80006e4 <main+0x214>)
 8000524:	f000 ff72 	bl	800140c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f000 fcb4 	bl	8000e98 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	486b      	ldr	r0, [pc, #428]	; (80006e4 <main+0x214>)
 8000536:	f000 ff69 	bl	800140c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2102      	movs	r1, #2
 800053e:	4869      	ldr	r0, [pc, #420]	; (80006e4 <main+0x214>)
 8000540:	f000 ff64 	bl	800140c <HAL_GPIO_WritePin>

		  buttonState = 0;
 8000544:	4b68      	ldr	r3, [pc, #416]	; (80006e8 <main+0x218>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
	  }

	  HAL_SPI_Receive(&hspi2, (uint8_t *)buff, 1, TIMEOUT_VALUE);
 800054a:	2332      	movs	r3, #50	; 0x32
 800054c:	2201      	movs	r2, #1
 800054e:	4967      	ldr	r1, [pc, #412]	; (80006ec <main+0x21c>)
 8000550:	4867      	ldr	r0, [pc, #412]	; (80006f0 <main+0x220>)
 8000552:	f002 fe00 	bl	8003156 <HAL_SPI_Receive>
	  HAL_Delay(50);
 8000556:	2032      	movs	r0, #50	; 0x32
 8000558:	f000 fc9e 	bl	8000e98 <HAL_Delay>
	  HAL_SPI_Receive(&hspi3, (uint8_t *)buff2, 1, TIMEOUT_VALUE);
 800055c:	2332      	movs	r3, #50	; 0x32
 800055e:	2201      	movs	r2, #1
 8000560:	4964      	ldr	r1, [pc, #400]	; (80006f4 <main+0x224>)
 8000562:	4865      	ldr	r0, [pc, #404]	; (80006f8 <main+0x228>)
 8000564:	f002 fdf7 	bl	8003156 <HAL_SPI_Receive>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)buff2, strlen(buff2), HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, (uint8_t *)newline, strlen(newline), HAL_MAX_DELAY);

	  //TOP HALF OF KEYBOARD CHECKS

	  if(buff[0] == '1'){
 8000568:	4b60      	ldr	r3, [pc, #384]	; (80006ec <main+0x21c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b31      	cmp	r3, #49	; 0x31
 800056e:	d108      	bne.n	8000582 <main+0xb2>
		  sendKeystroke(0x59);
 8000570:	2059      	movs	r0, #89	; 0x59
 8000572:	f000 fa4b 	bl	8000a0c <sendKeystroke>
		  strcpy(buff, "");
 8000576:	4b5d      	ldr	r3, [pc, #372]	; (80006ec <main+0x21c>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 800057c:	20fa      	movs	r0, #250	; 0xfa
 800057e:	f000 fc8b 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff[0] == '2'){
 8000582:	4b5a      	ldr	r3, [pc, #360]	; (80006ec <main+0x21c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b32      	cmp	r3, #50	; 0x32
 8000588:	d108      	bne.n	800059c <main+0xcc>
		  sendKeystroke(0x5A);
 800058a:	205a      	movs	r0, #90	; 0x5a
 800058c:	f000 fa3e 	bl	8000a0c <sendKeystroke>
		  strcpy(buff, "");
 8000590:	4b56      	ldr	r3, [pc, #344]	; (80006ec <main+0x21c>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 8000596:	20fa      	movs	r0, #250	; 0xfa
 8000598:	f000 fc7e 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff[0] == '3'){
 800059c:	4b53      	ldr	r3, [pc, #332]	; (80006ec <main+0x21c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b33      	cmp	r3, #51	; 0x33
 80005a2:	d108      	bne.n	80005b6 <main+0xe6>
		  sendKeystroke(0x5B);
 80005a4:	205b      	movs	r0, #91	; 0x5b
 80005a6:	f000 fa31 	bl	8000a0c <sendKeystroke>
		  strcpy(buff, "");
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <main+0x21c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 80005b0:	20fa      	movs	r0, #250	; 0xfa
 80005b2:	f000 fc71 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff[0] == '4'){
 80005b6:	4b4d      	ldr	r3, [pc, #308]	; (80006ec <main+0x21c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b34      	cmp	r3, #52	; 0x34
 80005bc:	d108      	bne.n	80005d0 <main+0x100>
		  sendKeystroke(0x5C);
 80005be:	205c      	movs	r0, #92	; 0x5c
 80005c0:	f000 fa24 	bl	8000a0c <sendKeystroke>
		  strcpy(buff, "");
 80005c4:	4b49      	ldr	r3, [pc, #292]	; (80006ec <main+0x21c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 80005ca:	20fa      	movs	r0, #250	; 0xfa
 80005cc:	f000 fc64 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff[0] == '5'){
 80005d0:	4b46      	ldr	r3, [pc, #280]	; (80006ec <main+0x21c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b35      	cmp	r3, #53	; 0x35
 80005d6:	d108      	bne.n	80005ea <main+0x11a>
		  sendKeystroke(0x5D);
 80005d8:	205d      	movs	r0, #93	; 0x5d
 80005da:	f000 fa17 	bl	8000a0c <sendKeystroke>
		  strcpy(buff, "");
 80005de:	4b43      	ldr	r3, [pc, #268]	; (80006ec <main+0x21c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 80005e4:	20fa      	movs	r0, #250	; 0xfa
 80005e6:	f000 fc57 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff[0] == '6'){
 80005ea:	4b40      	ldr	r3, [pc, #256]	; (80006ec <main+0x21c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b36      	cmp	r3, #54	; 0x36
 80005f0:	d108      	bne.n	8000604 <main+0x134>
		  sendKeystroke(0x5E);
 80005f2:	205e      	movs	r0, #94	; 0x5e
 80005f4:	f000 fa0a 	bl	8000a0c <sendKeystroke>
		  strcpy(buff, "");
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <main+0x21c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 80005fe:	20fa      	movs	r0, #250	; 0xfa
 8000600:	f000 fc4a 	bl	8000e98 <HAL_Delay>
	  }

	  //BOTTOM HALF OF KEYPAD CHECKS

	  if(buff2[0] == '7'){
 8000604:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <main+0x224>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b37      	cmp	r3, #55	; 0x37
 800060a:	d108      	bne.n	800061e <main+0x14e>
		  sendKeystroke(0x5F);
 800060c:	205f      	movs	r0, #95	; 0x5f
 800060e:	f000 f9fd 	bl	8000a0c <sendKeystroke>
		  strcpy(buff2, "");
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <main+0x224>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 8000618:	20fa      	movs	r0, #250	; 0xfa
 800061a:	f000 fc3d 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff2[0] == '8'){
 800061e:	4b35      	ldr	r3, [pc, #212]	; (80006f4 <main+0x224>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b38      	cmp	r3, #56	; 0x38
 8000624:	d108      	bne.n	8000638 <main+0x168>
		  sendKeystroke(0x60);
 8000626:	2060      	movs	r0, #96	; 0x60
 8000628:	f000 f9f0 	bl	8000a0c <sendKeystroke>
		  strcpy(buff2, "");
 800062c:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <main+0x224>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 8000632:	20fa      	movs	r0, #250	; 0xfa
 8000634:	f000 fc30 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff2[0] == '9'){
 8000638:	4b2e      	ldr	r3, [pc, #184]	; (80006f4 <main+0x224>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b39      	cmp	r3, #57	; 0x39
 800063e:	d108      	bne.n	8000652 <main+0x182>
		  sendKeystroke(0x61);
 8000640:	2061      	movs	r0, #97	; 0x61
 8000642:	f000 f9e3 	bl	8000a0c <sendKeystroke>
		  strcpy(buff2, "");
 8000646:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <main+0x224>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 800064c:	20fa      	movs	r0, #250	; 0xfa
 800064e:	f000 fc23 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff2[0] == '0'){
 8000652:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <main+0x224>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b30      	cmp	r3, #48	; 0x30
 8000658:	d108      	bne.n	800066c <main+0x19c>
		  sendKeystroke(0x62);
 800065a:	2062      	movs	r0, #98	; 0x62
 800065c:	f000 f9d6 	bl	8000a0c <sendKeystroke>
		  strcpy(buff2, "");
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <main+0x224>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 8000666:	20fa      	movs	r0, #250	; 0xfa
 8000668:	f000 fc16 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff2[0] == '*'){
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <main+0x224>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b2a      	cmp	r3, #42	; 0x2a
 8000672:	d108      	bne.n	8000686 <main+0x1b6>
		  sendKeystroke(0x55);
 8000674:	2055      	movs	r0, #85	; 0x55
 8000676:	f000 f9c9 	bl	8000a0c <sendKeystroke>
		  strcpy(buff2, "");
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <main+0x224>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 8000680:	20fa      	movs	r0, #250	; 0xfa
 8000682:	f000 fc09 	bl	8000e98 <HAL_Delay>
	  }
	  if(buff2[0] == '#'){		//this one is different because some computers do not support the keypad # code so I had to use left shift and 3
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <main+0x224>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b23      	cmp	r3, #35	; 0x23
 800068c:	d122      	bne.n	80006d4 <main+0x204>

		  keyboard.MODIFIER = 0x02;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <main+0x22c>)
 8000690:	2202      	movs	r2, #2
 8000692:	701a      	strb	r2, [r3, #0]
		  keyboard.KEYCODE1 = 0x20;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <main+0x22c>)
 8000696:	2220      	movs	r2, #32
 8000698:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboard, sizeof(keyboard));
 800069a:	2208      	movs	r2, #8
 800069c:	4917      	ldr	r1, [pc, #92]	; (80006fc <main+0x22c>)
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <main+0x230>)
 80006a0:	f005 f828 	bl	80056f4 <USBD_HID_SendReport>
		  HAL_Delay(50);
 80006a4:	2032      	movs	r0, #50	; 0x32
 80006a6:	f000 fbf7 	bl	8000e98 <HAL_Delay>

		  keyboard.MODIFIER = 0x00;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <main+0x22c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		  keyboard.KEYCODE1 = 0x00;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <main+0x22c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboard, sizeof(keyboard));
 80006b6:	2208      	movs	r2, #8
 80006b8:	4910      	ldr	r1, [pc, #64]	; (80006fc <main+0x22c>)
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <main+0x230>)
 80006bc:	f005 f81a 	bl	80056f4 <USBD_HID_SendReport>
		  HAL_Delay(50);
 80006c0:	2032      	movs	r0, #50	; 0x32
 80006c2:	f000 fbe9 	bl	8000e98 <HAL_Delay>

		  strcpy(buff2, "");
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <main+0x224>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(DELAYTIME);
 80006cc:	20fa      	movs	r0, #250	; 0xfa
 80006ce:	f000 fbe3 	bl	8000e98 <HAL_Delay>
 80006d2:	e711      	b.n	80004f8 <main+0x28>
	  }
	  else{
		  strcpy(buff, "");
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <main+0x21c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
		  strcpy(buff2, "");
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <main+0x224>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80006e0:	e70a      	b.n	80004f8 <main+0x28>
 80006e2:	bf00      	nop
 80006e4:	40020800 	.word	0x40020800
 80006e8:	2000017c 	.word	0x2000017c
 80006ec:	200001f0 	.word	0x200001f0
 80006f0:	20000198 	.word	0x20000198
 80006f4:	2000025c 	.word	0x2000025c
 80006f8:	20000204 	.word	0x20000204
 80006fc:	20000174 	.word	0x20000174
 8000700:	200002b8 	.word	0x200002b8

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fe06 	bl	8007324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <SystemClock_Config+0xc8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a26      	ldr	r2, [pc, #152]	; (80007cc <SystemClock_Config+0xc8>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <SystemClock_Config+0xc8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <SystemClock_Config+0xcc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <SystemClock_Config+0xcc>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <SystemClock_Config+0xcc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000764:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000778:	2348      	movs	r3, #72	; 0x48
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000780:	2303      	movs	r3, #3
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f001 ffe7 	bl	800275c <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 f95e 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fa49 	bl	8002c4c <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007c0:	f000 f948 	bl	8000a54 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI2_Init+0x60>)
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_SPI2_Init+0x64>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_SPI2_Init+0x60>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_SPI2_Init+0x60>)
 80007e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI2_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_SPI2_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI2_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_SPI2_Init+0x60>)
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_SPI2_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI2_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_SPI2_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI2_Init+0x60>)
 800081a:	220a      	movs	r2, #10
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_SPI2_Init+0x60>)
 8000820:	f002 fc10 	bl	8003044 <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 800082a:	f000 f913 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000198 	.word	0x20000198
 8000838:	40003800 	.word	0x40003800

0800083c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI3_Init+0x60>)
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <MX_SPI3_Init+0x64>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_SPI3_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI3_Init+0x60>)
 800084e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000852:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI3_Init+0x60>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_SPI3_Init+0x60>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_SPI3_Init+0x60>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_SPI3_Init+0x60>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_SPI3_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_SPI3_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_SPI3_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_SPI3_Init+0x60>)
 8000882:	220a      	movs	r2, #10
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_SPI3_Init+0x60>)
 8000888:	f002 fbdc 	bl	8003044 <HAL_SPI_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_SPI3_Init+0x5a>
  {
    Error_Handler();
 8000892:	f000 f8df 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000204 	.word	0x20000204
 80008a0:	40003c00 	.word	0x40003c00

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008de:	f003 f81d 	bl	800391c <HAL_UART_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80008e8:	f000 f8b4 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000270 	.word	0x20000270
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a3a      	ldr	r2, [pc, #232]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <MX_GPIO_Init+0x108>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_GPIO_Init+0x108>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a25      	ldr	r2, [pc, #148]	; (8000a00 <MX_GPIO_Init+0x108>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <MX_GPIO_Init+0x108>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2103      	movs	r1, #3
 8000982:	4820      	ldr	r0, [pc, #128]	; (8000a04 <MX_GPIO_Init+0x10c>)
 8000984:	f000 fd42 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2120      	movs	r1, #32
 800098c:	481e      	ldr	r0, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x110>)
 800098e:	f000 fd3d 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000998:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <MX_GPIO_Init+0x10c>)
 80009aa:	f000 fbab 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ae:	2303      	movs	r3, #3
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <MX_GPIO_Init+0x10c>)
 80009c6:	f000 fb9d 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_GPIO_Init+0x110>)
 80009e2:	f000 fb8f 	bl	8001104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2028      	movs	r0, #40	; 0x28
 80009ec:	f000 fb53 	bl	8001096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f0:	2028      	movs	r0, #40	; 0x28
 80009f2:	f000 fb6c 	bl	80010ce <HAL_NVIC_EnableIRQ>

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020000 	.word	0x40020000

08000a0c <sendKeystroke>:

/* USER CODE BEGIN 4 */

void sendKeystroke(int keycode)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	keyboard.KEYCODE1 = keycode;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <sendKeystroke+0x40>)
 8000a1a:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboard, sizeof(keyboard));
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <sendKeystroke+0x40>)
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <sendKeystroke+0x44>)
 8000a22:	f004 fe67 	bl	80056f4 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000a26:	2032      	movs	r0, #50	; 0x32
 8000a28:	f000 fa36 	bl	8000e98 <HAL_Delay>

	keyboard.KEYCODE1 = 0x00;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <sendKeystroke+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboard, sizeof(keyboard));
 8000a32:	2208      	movs	r2, #8
 8000a34:	4905      	ldr	r1, [pc, #20]	; (8000a4c <sendKeystroke+0x40>)
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <sendKeystroke+0x44>)
 8000a38:	f004 fe5c 	bl	80056f4 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000a3c:	2032      	movs	r0, #50	; 0x32
 8000a3e:	f000 fa2b 	bl	8000e98 <HAL_Delay>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000174 	.word	0x20000174
 8000a50:	200002b8 	.word	0x200002b8

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f000 faee 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a51      	ldr	r2, [pc, #324]	; (8000c14 <HAL_SPI_MspInit+0x164>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d14b      	bne.n	8000b6a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
 8000ad6:	4b50      	ldr	r3, [pc, #320]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a4f      	ldr	r2, [pc, #316]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	4b49      	ldr	r3, [pc, #292]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a48      	ldr	r2, [pc, #288]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a41      	ldr	r2, [pc, #260]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b26:	2308      	movs	r3, #8
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b36:	2305      	movs	r3, #5
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4836      	ldr	r0, [pc, #216]	; (8000c1c <HAL_SPI_MspInit+0x16c>)
 8000b42:	f000 fadf 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b58:	2305      	movs	r3, #5
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	482f      	ldr	r0, [pc, #188]	; (8000c20 <HAL_SPI_MspInit+0x170>)
 8000b64:	f000 face 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b68:	e050      	b.n	8000c0c <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	; (8000c24 <HAL_SPI_MspInit+0x174>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d14b      	bne.n	8000c0c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a1f      	ldr	r2, [pc, #124]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_SPI_MspInit+0x168>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	480e      	ldr	r0, [pc, #56]	; (8000c20 <HAL_SPI_MspInit+0x170>)
 8000be6:	f000 fa8d 	bl	8001104 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_SPI_MspInit+0x16c>)
 8000c08:	f000 fa7c 	bl	8001104 <HAL_GPIO_Init>
}
 8000c0c:	bf00      	nop
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40003800 	.word	0x40003800
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40003c00 	.word	0x40003c00

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_UART_MspInit+0x84>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d12b      	bne.n	8000ca2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_UART_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_UART_MspInit+0x88>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_UART_MspInit+0x88>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_UART_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_UART_MspInit+0x88>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_UART_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|USART_TX_Pin|USART_RX_Pin;
 8000c82:	230f      	movs	r3, #15
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c92:	2307      	movs	r3, #7
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_UART_MspInit+0x8c>)
 8000c9e:	f000 fa31 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40004400 	.word	0x40004400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f8a8 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d14:	f000 fb94 	bl	8001440 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  buttonState = 1;
 8000d18:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <EXTI15_10_IRQHandler+0x18>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000017c 	.word	0x2000017c

08000d28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <OTG_FS_IRQHandler+0x10>)
 8000d2e:	f000 fcfa 	bl	8001726 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000788 	.word	0x20000788

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d66:	490e      	ldr	r1, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d7c:	4c0b      	ldr	r4, [pc, #44]	; (8000dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d8a:	f7ff ffd7 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f006 faa5 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fb9d 	bl	80004d0 <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000da4:	080073b4 	.word	0x080073b4
  ldr r2, =_sbss
 8000da8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000dac:	20000b90 	.word	0x20000b90

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f94f 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fe3a 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f967 	bl	80010ea <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f92f 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	200002b4 	.word	0x200002b4

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200002b4 	.word	0x200002b4

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e159      	b.n	80013d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 8148 	bne.w	80013ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b01      	cmp	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	2b02      	cmp	r3, #2
 8001154:	d130      	bne.n	80011b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a2 	beq.w	80013ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a56      	ldr	r2, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d019      	beq.n	8001306 <HAL_GPIO_Init+0x202>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a48      	ldr	r2, [pc, #288]	; (80013f8 <HAL_GPIO_Init+0x2f4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1fe>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a47      	ldr	r2, [pc, #284]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1fa>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1f6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <HAL_GPIO_Init+0x300>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1f2>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x204>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x204>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134a:	4a2f      	ldr	r2, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x304>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <HAL_GPIO_Init+0x304>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <HAL_GPIO_Init+0x304>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f aea2 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f806 	bl	8001470 <HAL_GPIO_EXTI_Callback>
  }
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001488:	b08f      	sub	sp, #60	; 0x3c
 800148a:	af0a      	add	r7, sp, #40	; 0x28
 800148c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e10f      	b.n	80016b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f005 fc1a 	bl	8006cec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fd4b 	bl	8003f72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	687e      	ldr	r6, [r7, #4]
 80014e4:	466d      	mov	r5, sp
 80014e6:	f106 0410 	add.w	r4, r6, #16
 80014ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80014fa:	1d33      	adds	r3, r6, #4
 80014fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fe:	6838      	ldr	r0, [r7, #0]
 8001500:	f002 fc22 	bl	8003d48 <USB_CoreInit>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2202      	movs	r2, #2
 800150e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0d0      	b.n	80016b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f002 fd39 	bl	8003f94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	e04a      	b.n	80015be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	333d      	adds	r3, #61	; 0x3d
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	333c      	adds	r3, #60	; 0x3c
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	b298      	uxth	r0, r3
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	3342      	adds	r3, #66	; 0x42
 8001564:	4602      	mov	r2, r0
 8001566:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	333f      	adds	r3, #63	; 0x3f
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3344      	adds	r3, #68	; 0x44
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3348      	adds	r3, #72	; 0x48
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3350      	adds	r3, #80	; 0x50
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3af      	bcc.n	8001528 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e044      	b.n	8001658 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	3301      	adds	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d3b5      	bcc.n	80015ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	687e      	ldr	r6, [r7, #4]
 800166a:	466d      	mov	r5, sp
 800166c:	f106 0410 	add.w	r4, r6, #16
 8001670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800167c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001680:	1d33      	adds	r3, r6, #4
 8001682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f002 fcd1 	bl	800402c <USB_DevInit>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2202      	movs	r2, #2
 8001694:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e00d      	b.n	80016b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fd4d 	bl	8005150 <USB_DevDisconnect>

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_PCD_Start+0x1c>
 80016d8:	2302      	movs	r3, #2
 80016da:	e020      	b.n	800171e <HAL_PCD_Start+0x5e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d109      	bne.n	8001700 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d005      	beq.n	8001700 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fc23 	bl	8003f50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fcfd 	bl	800510e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b08d      	sub	sp, #52	; 0x34
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f003 fdbb 	bl	80052b8 <USB_GetMode>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	f040 839d 	bne.w	8001e84 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fd1f 	bl	8005192 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8393 	beq.w	8001e82 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fd16 	bl	8005192 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b02      	cmp	r3, #2
 800176e:	d107      	bne.n	8001780 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f002 0202 	and.w	r2, r2, #2
 800177e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fd04 	bl	8005192 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b10      	cmp	r3, #16
 8001792:	d161      	bne.n	8001858 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0210 	bic.w	r2, r2, #16
 80017a2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f003 020f 	and.w	r2, r3, #15
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	3304      	adds	r3, #4
 80017c2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	0c5b      	lsrs	r3, r3, #17
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d124      	bne.n	800181a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d035      	beq.n	8001848 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	6a38      	ldr	r0, [r7, #32]
 80017f0:	f003 fb3b 	bl	8004e6a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001800:	441a      	add	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001812:	441a      	add	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	619a      	str	r2, [r3, #24]
 8001818:	e016      	b.n	8001848 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	0c5b      	lsrs	r3, r3, #17
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	2b06      	cmp	r3, #6
 8001824:	d110      	bne.n	8001848 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800182c:	2208      	movs	r2, #8
 800182e:	4619      	mov	r1, r3
 8001830:	6a38      	ldr	r0, [r7, #32]
 8001832:	f003 fb1a 	bl	8004e6a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001842:	441a      	add	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0210 	orr.w	r2, r2, #16
 8001856:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fc98 	bl	8005192 <USB_ReadInterrupts>
 8001862:	4603      	mov	r3, r0
 8001864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800186c:	d16e      	bne.n	800194c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fc9e 	bl	80051b8 <USB_ReadDevAllOutEpInterrupt>
 800187c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800187e:	e062      	b.n	8001946 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d057      	beq.n	800193a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f003 fcc3 	bl	8005220 <USB_ReadDevOutEPInterrupt>
 800189a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b2:	461a      	mov	r2, r3
 80018b4:	2301      	movs	r3, #1
 80018b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fd98 	bl	80023f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00c      	beq.n	80018e4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d6:	461a      	mov	r2, r3
 80018d8:	2308      	movs	r3, #8
 80018da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fe92 	bl	8002608 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fa:	461a      	mov	r2, r3
 80018fc:	2310      	movs	r3, #16
 80018fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001916:	461a      	mov	r2, r3
 8001918:	2320      	movs	r3, #32
 800191a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	015a      	lsls	r2, r3, #5
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4413      	add	r3, r2
 800192e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001932:	461a      	mov	r2, r3
 8001934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001938:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	3301      	adds	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d199      	bne.n	8001880 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fc1e 	bl	8005192 <USB_ReadInterrupts>
 8001956:	4603      	mov	r3, r0
 8001958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001960:	f040 80c0 	bne.w	8001ae4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fc3f 	bl	80051ec <USB_ReadDevAllInEpInterrupt>
 800196e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001974:	e0b2      	b.n	8001adc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a7 	beq.w	8001ad0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fc65 	bl	800525c <USB_ReadDevInEPInterrupt>
 8001992:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d057      	beq.n	8001a4e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	2201      	movs	r2, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69f9      	ldr	r1, [r7, #28]
 80019ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019be:	4013      	ands	r3, r2
 80019c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ce:	461a      	mov	r2, r3
 80019d0:	2301      	movs	r3, #1
 80019d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d132      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	3348      	adds	r3, #72	; 0x48
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4403      	add	r3, r0
 80019fc:	3344      	adds	r3, #68	; 0x44
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4419      	add	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4403      	add	r3, r0
 8001a10:	3348      	adds	r3, #72	; 0x48
 8001a12:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d113      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x31c>
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3350      	adds	r3, #80	; 0x50
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d108      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	f003 fc6d 	bl	800531c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f005 f9d0 	bl	8006dee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a64:	461a      	mov	r2, r3
 8001a66:	2308      	movs	r3, #8
 8001a68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a80:	461a      	mov	r2, r3
 8001a82:	2310      	movs	r3, #16
 8001a84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	015a      	lsls	r2, r3, #5
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2340      	movs	r3, #64	; 0x40
 8001aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	015a      	lsls	r2, r3, #5
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2302      	movs	r3, #2
 8001abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fc03 	bl	80022d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad8:	085b      	lsrs	r3, r3, #1
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f47f af49 	bne.w	8001976 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fb52 	bl	8005192 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001af8:	d122      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d108      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b20:	2100      	movs	r1, #0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fe0e 	bl	8002744 <HAL_PCDEx_LPM_Callback>
 8001b28:	e002      	b.n	8001b30 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f005 f9cc 	bl	8006ec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fb24 	bl	8005192 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b54:	d112      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d102      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f005 f988 	bl	8006e7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b7a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fb06 	bl	8005192 <USB_ReadInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b90:	f040 80c7 	bne.w	8001d22 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2110      	movs	r1, #16
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fba0 	bl	80042f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb8:	e056      	b.n	8001c68 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bcc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bde:	0151      	lsls	r1, r2, #5
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	440a      	add	r2, r1
 8001be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	015a      	lsls	r2, r3, #5
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfe:	0151      	lsls	r1, r2, #5
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	440a      	add	r2, r1
 8001c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c32:	0151      	lsls	r1, r2, #5
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	440a      	add	r2, r1
 8001c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c52:	0151      	lsls	r1, r2, #5
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	440a      	add	r2, r1
 8001c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c64:	3301      	adds	r3, #1
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d3a3      	bcc.n	8001bba <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d016      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9e:	f043 030b 	orr.w	r3, r3, #11
 8001ca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb4:	f043 030b 	orr.w	r3, r3, #11
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	e015      	b.n	8001ce8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cd2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce2:	f043 030b 	orr.w	r3, r3, #11
 8001ce6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cfa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f003 fb05 	bl	800531c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 fa33 	bl	8005192 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d36:	d124      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fac9 	bl	80052d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fb31 	bl	80043ae <USB_GetDevSpeed>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681c      	ldr	r4, [r3, #0]
 8001d58:	f001 f940 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8001d5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4620      	mov	r0, r4
 8001d68:	f002 f850 	bl	8003e0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f005 f866 	bl	8006e3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f003 fa03 	bl	8005192 <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d10a      	bne.n	8001dac <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f005 f843 	bl	8006e22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f002 0208 	and.w	r2, r2, #8
 8001daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 f9ee 	bl	8005192 <USB_ReadInterrupts>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dc0:	d10f      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f005 f89b 	bl	8006f08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 f9d3 	bl	8005192 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df6:	d10f      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f005 f86e 	bl	8006ee4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 f9b8 	bl	8005192 <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d10a      	bne.n	8001e44 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f005 f87c 	bl	8006f2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f9a2 	bl	8005192 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d115      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f005 f86c 	bl	8006f48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	e000      	b.n	8001e84 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e82:	bf00      	nop
    }
  }
}
 8001e84:	3734      	adds	r7, #52	; 0x34
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}

08001e8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_PCD_SetAddress+0x1a>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e013      	b.n	8001ecc <HAL_PCD_SetAddress+0x42>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f900 	bl	80050c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	70fb      	strb	r3, [r7, #3]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	803b      	strh	r3, [r7, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da0f      	bge.n	8001f1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	3338      	adds	r3, #56	; 0x38
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
 8001f18:	e00f      	b.n	8001f3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f46:	883a      	ldrh	r2, [r7, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	78ba      	ldrb	r2, [r7, #2]
 8001f50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f64:	78bb      	ldrb	r3, [r7, #2]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d102      	bne.n	8001f70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_PCD_EP_Open+0xaa>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e00e      	b.n	8001f9c <HAL_PCD_EP_Open+0xc8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fa33 	bl	80043f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da0f      	bge.n	8001fd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 020f 	and.w	r2, r3, #15
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	3338      	adds	r3, #56	; 0x38
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	705a      	strb	r2, [r3, #1]
 8001fd6:	e00f      	b.n	8001ff8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_PCD_EP_Close+0x6e>
 800200e:	2302      	movs	r3, #2
 8002010:	e00e      	b.n	8002030 <HAL_PCD_EP_Close+0x8c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fa71 	bl	8004508 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	460b      	mov	r3, r1
 8002046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2200      	movs	r2, #0
 8002078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207a:	7afb      	ldrb	r3, [r7, #11]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	b2da      	uxtb	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	6979      	ldr	r1, [r7, #20]
 80020ac:	f002 fd4c 	bl	8004b48 <USB_EP0StartXfer>
 80020b0:	e008      	b.n	80020c4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	6979      	ldr	r1, [r7, #20]
 80020c0:	f002 fafe 	bl	80046c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	460b      	mov	r3, r1
 80020dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020de:	7afb      	ldrb	r3, [r7, #11]
 80020e0:	f003 020f 	and.w	r2, r3, #15
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	3338      	adds	r3, #56	; 0x38
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	3304      	adds	r3, #4
 80020f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2201      	movs	r2, #1
 800210c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	b2da      	uxtb	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d102      	bne.n	8002128 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002128:	7afb      	ldrb	r3, [r7, #11]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	f002 fd02 	bl	8004b48 <USB_EP0StartXfer>
 8002144:	e008      	b.n	8002158 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	6979      	ldr	r1, [r7, #20]
 8002154:	f002 fab4 	bl	80046c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	f003 020f 	and.w	r2, r3, #15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d901      	bls.n	8002180 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e050      	b.n	8002222 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002184:	2b00      	cmp	r3, #0
 8002186:	da0f      	bge.n	80021a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3338      	adds	r3, #56	; 0x38
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	705a      	strb	r2, [r3, #1]
 80021a6:	e00d      	b.n	80021c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_PCD_EP_SetStall+0x82>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e01e      	b.n	8002222 <HAL_PCD_EP_SetStall+0xc0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 fe91 	bl	8004f1a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	b2d9      	uxtb	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002212:	461a      	mov	r2, r3
 8002214:	f003 f882 	bl	800531c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 020f 	and.w	r2, r3, #15
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	d901      	bls.n	8002248 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e042      	b.n	80022ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da0f      	bge.n	8002270 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3338      	adds	r3, #56	; 0x38
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	705a      	strb	r2, [r3, #1]
 800226e:	e00f      	b.n	8002290 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 020f 	and.w	r2, r3, #15
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_PCD_EP_ClrStall+0x86>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e00e      	b.n	80022ce <HAL_PCD_EP_ClrStall+0xa4>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fe99 	bl	8004ff6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b08a      	sub	sp, #40	; 0x28
 80022da:	af02      	add	r7, sp, #8
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	3338      	adds	r3, #56	; 0x38
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	429a      	cmp	r2, r3
 8002308:	d901      	bls.n	800230e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06c      	b.n	80023e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	69fa      	ldr	r2, [r7, #28]
 8002320:	429a      	cmp	r2, r3
 8002322:	d902      	bls.n	800232a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3303      	adds	r3, #3
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002332:	e02b      	b.n	800238c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	429a      	cmp	r2, r3
 8002348:	d902      	bls.n	8002350 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	3303      	adds	r3, #3
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68d9      	ldr	r1, [r3, #12]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002368:	b2db      	uxtb	r3, r3
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4603      	mov	r3, r0
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f002 fd3d 	bl	8004dee <USB_WritePacket>

    ep->xfer_buff  += len;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	441a      	add	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	441a      	add	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	b29b      	uxth	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d809      	bhi.n	80023b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d203      	bcs.n	80023b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1be      	bne.n	8002334 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d811      	bhi.n	80023e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	2201      	movs	r2, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	43db      	mvns	r3, r3
 80023dc:	6939      	ldr	r1, [r7, #16]
 80023de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023e2:	4013      	ands	r3, r2
 80023e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	333c      	adds	r3, #60	; 0x3c
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	f040 80a0 	bne.w	8002568 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4a72      	ldr	r2, [pc, #456]	; (8002600 <PCD_EP_OutXfrComplete_int+0x210>)
 8002436:	4293      	cmp	r3, r2
 8002438:	f240 80dd 	bls.w	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80d7 	beq.w	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002454:	461a      	mov	r2, r3
 8002456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245a:	6093      	str	r3, [r2, #8]
 800245c:	e0cb      	b.n	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	2320      	movs	r3, #32
 8002478:	6093      	str	r3, [r2, #8]
 800247a:	e0bc      	b.n	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 80b7 	bne.w	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a5d      	ldr	r2, [pc, #372]	; (8002600 <PCD_EP_OutXfrComplete_int+0x210>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d90f      	bls.n	80024b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ac:	6093      	str	r3, [r2, #8]
 80024ae:	e0a2      	b.n	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80024d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4403      	add	r3, r0
 80024e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4403      	add	r3, r0
 800250e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4419      	add	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4403      	add	r3, r0
 8002524:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002528:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d114      	bne.n	800255a <PCD_EP_OutXfrComplete_int+0x16a>
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d108      	bne.n	800255a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002552:	461a      	mov	r2, r3
 8002554:	2101      	movs	r1, #1
 8002556:	f002 fee1 	bl	800531c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	4619      	mov	r1, r3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f004 fc29 	bl	8006db8 <HAL_PCD_DataOutStageCallback>
 8002566:	e046      	b.n	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <PCD_EP_OutXfrComplete_int+0x214>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d124      	bne.n	80025ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800258c:	6093      	str	r3, [r2, #8]
 800258e:	e032      	b.n	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a6:	461a      	mov	r2, r3
 80025a8:	2320      	movs	r3, #32
 80025aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f004 fc00 	bl	8006db8 <HAL_PCD_DataOutStageCallback>
 80025b8:	e01d      	b.n	80025f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d114      	bne.n	80025ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d108      	bne.n	80025ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025e2:	461a      	mov	r2, r3
 80025e4:	2100      	movs	r1, #0
 80025e6:	f002 fe99 	bl	800531c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4619      	mov	r1, r3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f004 fbe1 	bl	8006db8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	4f54300a 	.word	0x4f54300a
 8002604:	4f54310a 	.word	0x4f54310a

08002608 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	333c      	adds	r3, #60	; 0x3c
 8002620:	3304      	adds	r3, #4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <PCD_EP_OutSetupPacket_int+0x88>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d90e      	bls.n	800265c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800265a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f004 fb99 	bl	8006d94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <PCD_EP_OutSetupPacket_int+0x88>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d90c      	bls.n	8002684 <PCD_EP_OutSetupPacket_int+0x7c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800267c:	461a      	mov	r2, r3
 800267e:	2101      	movs	r1, #1
 8002680:	f002 fe4c 	bl	800531c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	4f54300a 	.word	0x4f54300a

08002694 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
 80026a0:	4613      	mov	r3, r2
 80026a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026b2:	883b      	ldrh	r3, [r7, #0]
 80026b4:	0419      	lsls	r1, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	430a      	orrs	r2, r1
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
 80026c0:	e028      	b.n	8002714 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e00d      	b.n	80026f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	3340      	adds	r3, #64	; 0x40
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	3301      	adds	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d3ec      	bcc.n	80026d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026fc:	883b      	ldrh	r3, [r7, #0]
 80026fe:	0418      	lsls	r0, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	3b01      	subs	r3, #1
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	4302      	orrs	r2, r0
 800270c:	3340      	adds	r3, #64	; 0x40
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e264      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d075      	beq.n	8002866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800277a:	4ba3      	ldr	r3, [pc, #652]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b04      	cmp	r3, #4
 8002784:	d00c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002786:	4ba0      	ldr	r3, [pc, #640]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800278e:	2b08      	cmp	r3, #8
 8002790:	d112      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002792:	4b9d      	ldr	r3, [pc, #628]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	4b99      	ldr	r3, [pc, #612]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d05b      	beq.n	8002864 <HAL_RCC_OscConfig+0x108>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d157      	bne.n	8002864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e23f      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x74>
 80027c2:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a90      	ldr	r2, [pc, #576]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	e01d      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x98>
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a8a      	ldr	r2, [pc, #552]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a87      	ldr	r2, [pc, #540]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e00b      	b.n	800280c <HAL_RCC_OscConfig+0xb0>
 80027f4:	4b84      	ldr	r3, [pc, #528]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a83      	ldr	r2, [pc, #524]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80027fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800280a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d013      	beq.n	800283c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fb34 	bl	8000e80 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe fb30 	bl	8000e80 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e204      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0xc0>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fb20 	bl	8000e80 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002844:	f7fe fb1c 	bl	8000e80 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e1f0      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0xe8>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002886:	2b08      	cmp	r3, #8
 8002888:	d11c      	bne.n	80028c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288a:	4b5f      	ldr	r3, [pc, #380]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x152>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1c4      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ae:	4b56      	ldr	r3, [pc, #344]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4952      	ldr	r1, [pc, #328]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c2:	e03a      	b.n	800293a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028cc:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <HAL_RCC_OscConfig+0x2b0>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fad5 	bl	8000e80 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028da:	f7fe fad1 	bl	8000e80 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1a5      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	4b46      	ldr	r3, [pc, #280]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	4940      	ldr	r1, [pc, #256]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290e:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <HAL_RCC_OscConfig+0x2b0>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fab4 	bl	8000e80 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fab0 	bl	8000e80 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e184      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	4b36      	ldr	r3, [pc, #216]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d030      	beq.n	80029a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCC_OscConfig+0x2b4>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002954:	f7fe fa94 	bl	8000e80 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295c:	f7fe fa90 	bl	8000e80 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e164      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x200>
 800297a:	e015      	b.n	80029a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_OscConfig+0x2b4>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe fa7d 	bl	8000e80 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298a:	f7fe fa79 	bl	8000e80 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e14d      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a0 	beq.w	8002af6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_OscConfig+0x2b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d121      	bne.n	8002a36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_RCC_OscConfig+0x2b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <HAL_RCC_OscConfig+0x2b8>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fe:	f7fe fa3f 	bl	8000e80 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a04:	e011      	b.n	8002a2a <HAL_RCC_OscConfig+0x2ce>
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	42470000 	.word	0x42470000
 8002a10:	42470e80 	.word	0x42470e80
 8002a14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a18:	f7fe fa32 	bl	8000e80 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e106      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b85      	ldr	r3, [pc, #532]	; (8002c40 <HAL_RCC_OscConfig+0x4e4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d106      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2f0>
 8002a3e:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a80      	ldr	r2, [pc, #512]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	e01c      	b.n	8002a86 <HAL_RCC_OscConfig+0x32a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d10c      	bne.n	8002a6e <HAL_RCC_OscConfig+0x312>
 8002a54:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a58:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a60:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6c:	e00b      	b.n	8002a86 <HAL_RCC_OscConfig+0x32a>
 8002a6e:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a74      	ldr	r2, [pc, #464]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002a80:	f023 0304 	bic.w	r3, r3, #4
 8002a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d015      	beq.n	8002aba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7fe f9f7 	bl	8000e80 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe f9f3 	bl	8000e80 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0c5      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ee      	beq.n	8002a96 <HAL_RCC_OscConfig+0x33a>
 8002ab8:	e014      	b.n	8002ae4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe f9e1 	bl	8000e80 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe f9dd 	bl	8000e80 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0af      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad8:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ee      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aea:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a55      	ldr	r2, [pc, #340]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 809b 	beq.w	8002c36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b00:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d05c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d141      	bne.n	8002b98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_RCC_OscConfig+0x4ec>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f9b1 	bl	8000e80 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe f9ad 	bl	8000e80 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e081      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b34:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	019b      	lsls	r3, r3, #6
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
 8002b64:	4937      	ldr	r1, [pc, #220]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_OscConfig+0x4ec>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe f986 	bl	8000e80 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe f982 	bl	8000e80 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e056      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x41c>
 8002b96:	e04e      	b.n	8002c36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x4ec>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe f96f 	bl	8000e80 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe f96b 	bl	8000e80 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e03f      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x44a>
 8002bc4:	e037      	b.n	8002c36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e032      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_RCC_OscConfig+0x4e8>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d028      	beq.n	8002c32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d121      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d11a      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40007000 	.word	0x40007000
 8002c44:	40023800 	.word	0x40023800
 8002c48:	42470060 	.word	0x42470060

08002c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0cc      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c60:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d90c      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0b8      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d020      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca0:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002caa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb8:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a52      	ldr	r2, [pc, #328]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	494d      	ldr	r1, [pc, #308]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d044      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d119      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e07f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e06f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e067      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2a:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 0203 	bic.w	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4934      	ldr	r1, [pc, #208]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d3c:	f7fe f8a0 	bl	8000e80 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d44:	f7fe f89c 	bl	8000e80 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e04f      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 020c 	and.w	r2, r3, #12
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1eb      	bne.n	8002d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d20c      	bcs.n	8002d94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e032      	b.n	8002dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4916      	ldr	r1, [pc, #88]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dd2:	f000 f821 	bl	8002e18 <HAL_RCC_GetSysClockFreq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	490a      	ldr	r1, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	5ccb      	ldrb	r3, [r1, r3]
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f800 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	0800738c 	.word	0x0800738c
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e30:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d00d      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x40>
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	f200 80bd 	bhi.w	8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x34>
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e4a:	e0b7      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e4e:	60bb      	str	r3, [r7, #8]
       break;
 8002e50:	e0b7      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e52:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e54:	60bb      	str	r3, [r7, #8]
      break;
 8002e56:	e0b4      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e58:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e62:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d04d      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6e:	4b58      	ldr	r3, [pc, #352]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	099b      	lsrs	r3, r3, #6
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	ea02 0800 	and.w	r8, r2, r0
 8002e86:	ea03 0901 	and.w	r9, r3, r1
 8002e8a:	4640      	mov	r0, r8
 8002e8c:	4649      	mov	r1, r9
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	014b      	lsls	r3, r1, #5
 8002e98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e9c:	0142      	lsls	r2, r0, #5
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	ebb0 0008 	subs.w	r0, r0, r8
 8002ea6:	eb61 0109 	sbc.w	r1, r1, r9
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	018b      	lsls	r3, r1, #6
 8002eb4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eb8:	0182      	lsls	r2, r0, #6
 8002eba:	1a12      	subs	r2, r2, r0
 8002ebc:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec0:	f04f 0000 	mov.w	r0, #0
 8002ec4:	f04f 0100 	mov.w	r1, #0
 8002ec8:	00d9      	lsls	r1, r3, #3
 8002eca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ece:	00d0      	lsls	r0, r2, #3
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	eb12 0208 	adds.w	r2, r2, r8
 8002ed8:	eb43 0309 	adc.w	r3, r3, r9
 8002edc:	f04f 0000 	mov.w	r0, #0
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	0259      	lsls	r1, r3, #9
 8002ee6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eea:	0250      	lsls	r0, r2, #9
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	f7fd f96c 	bl	80001d8 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4613      	mov	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e04a      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	461a      	mov	r2, r3
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	ea02 0400 	and.w	r4, r2, r0
 8002f22:	ea03 0501 	and.w	r5, r3, r1
 8002f26:	4620      	mov	r0, r4
 8002f28:	4629      	mov	r1, r5
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	014b      	lsls	r3, r1, #5
 8002f34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f38:	0142      	lsls	r2, r0, #5
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	1b00      	subs	r0, r0, r4
 8002f40:	eb61 0105 	sbc.w	r1, r1, r5
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	018b      	lsls	r3, r1, #6
 8002f4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f52:	0182      	lsls	r2, r0, #6
 8002f54:	1a12      	subs	r2, r2, r0
 8002f56:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	00d9      	lsls	r1, r3, #3
 8002f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f68:	00d0      	lsls	r0, r2, #3
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	1912      	adds	r2, r2, r4
 8002f70:	eb45 0303 	adc.w	r3, r5, r3
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	0299      	lsls	r1, r3, #10
 8002f7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f82:	0290      	lsls	r0, r2, #10
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	f7fd f920 	bl	80001d8 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	3301      	adds	r3, #1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	60bb      	str	r3, [r7, #8]
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fbe:	60bb      	str	r3, [r7, #8]
      break;
 8002fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200

08002fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000

08002ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ff8:	f7ff fff0 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	0800739c 	.word	0x0800739c

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003020:	f7ff ffdc 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	0b5b      	lsrs	r3, r3, #13
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4903      	ldr	r1, [pc, #12]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	0800739c 	.word	0x0800739c

08003044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07b      	b.n	800314e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003066:	d009      	beq.n	800307c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
 800306e:	e005      	b.n	800307c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd fd0a 	bl	8000ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003100:	ea42 0103 	orr.w	r1, r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0104 	and.w	r1, r3, #4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	f003 0210 	and.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b088      	sub	sp, #32
 800315a:	af02      	add	r7, sp, #8
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003172:	d112      	bne.n	800319a <HAL_SPI_Receive+0x44>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10e      	bne.n	800319a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2204      	movs	r2, #4
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8f1 	bl	8003378 <HAL_SPI_TransmitReceive>
 8003196:	4603      	mov	r3, r0
 8003198:	e0ea      	b.n	8003370 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_SPI_Receive+0x52>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0e3      	b.n	8003370 <HAL_SPI_Receive+0x21a>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b0:	f7fd fe66 	bl	8000e80 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031c6:	e0ca      	b.n	800335e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_SPI_Receive+0x7e>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031d8:	e0c1      	b.n	800335e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2204      	movs	r2, #4
 80031de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003220:	d10f      	bne.n	8003242 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d007      	beq.n	8003260 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d162      	bne.n	800332e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003268:	e02e      	b.n	80032c8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d115      	bne.n	80032a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f103 020c 	add.w	r2, r3, #12
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	7812      	ldrb	r2, [r2, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a2:	e011      	b.n	80032c8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a4:	f7fd fdec 	bl	8000e80 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d803      	bhi.n	80032bc <HAL_SPI_Receive+0x166>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d102      	bne.n	80032c2 <HAL_SPI_Receive+0x16c>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032c6:	e04a      	b.n	800335e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1cb      	bne.n	800326a <HAL_SPI_Receive+0x114>
 80032d2:	e031      	b.n	8003338 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d113      	bne.n	800330a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	b292      	uxth	r2, r2
 80032ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003308:	e011      	b.n	800332e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800330a:	f7fd fdb9 	bl	8000e80 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d803      	bhi.n	8003322 <HAL_SPI_Receive+0x1cc>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d102      	bne.n	8003328 <HAL_SPI_Receive+0x1d2>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800332c:	e017      	b.n	800335e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1cd      	bne.n	80032d4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fa45 	bl	80037cc <SPI_EndRxTransaction>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
 800335a:	e000      	b.n	800335e <HAL_SPI_Receive+0x208>
  }

error :
 800335c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003386:	2301      	movs	r3, #1
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_SPI_TransmitReceive+0x26>
 800339a:	2302      	movs	r3, #2
 800339c:	e18a      	b.n	80036b4 <HAL_SPI_TransmitReceive+0x33c>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a6:	f7fd fd6b 	bl	8000e80 <HAL_GetTick>
 80033aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d00f      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x70>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ce:	d107      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x68>
 80033d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d003      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033e6:	e15b      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x82>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x82>
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003400:	e14e      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b04      	cmp	r3, #4
 800340c:	d003      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	887a      	ldrh	r2, [r7, #2]
 8003426:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	887a      	ldrh	r2, [r7, #2]
 800343e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d007      	beq.n	800346a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003468:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d178      	bne.n	8003566 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_SPI_TransmitReceive+0x10a>
 800347c:	8b7b      	ldrh	r3, [r7, #26]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d166      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	1c9a      	adds	r2, r3, #2
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a6:	e053      	b.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d11b      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x176>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d016      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x176>
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d113      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d119      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x1b8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d014      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	b292      	uxth	r2, r2
 8003512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	1c9a      	adds	r2, r3, #2
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800352c:	2301      	movs	r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003530:	f7fd fca6 	bl	8000e80 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800353c:	429a      	cmp	r2, r3
 800353e:	d807      	bhi.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d003      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800354e:	e0a7      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1a6      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x130>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1a1      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x130>
 8003564:	e07c      	b.n	8003660 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x1fc>
 800356e:	8b7b      	ldrh	r3, [r7, #26]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d16b      	bne.n	800364c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800359a:	e057      	b.n	800364c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d11c      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x26c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d017      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x26c>
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d114      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d119      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x2ae>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d014      	beq.n	8003626 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003622:	2301      	movs	r3, #1
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003626:	f7fd fc2b 	bl	8000e80 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003632:	429a      	cmp	r2, r3
 8003634:	d803      	bhi.n	800363e <HAL_SPI_TransmitReceive+0x2c6>
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d102      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x2cc>
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800364a:	e029      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1a2      	bne.n	800359c <HAL_SPI_TransmitReceive+0x224>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d19d      	bne.n	800359c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f917 	bl	8003898 <SPI_EndRxTxTransaction>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800367c:	e010      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	e000      	b.n	80036a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800369e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3730      	adds	r7, #48	; 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036cc:	f7fd fbd8 	bl	8000e80 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036dc:	f7fd fbd0 	bl	8000e80 <HAL_GetTick>
 80036e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	0d1b      	lsrs	r3, r3, #20
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036f2:	e054      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d050      	beq.n	800379e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036fc:	f7fd fbc0 	bl	8000e80 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x56>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d13d      	bne.n	800378e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003720:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372a:	d111      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	d004      	beq.n	8003740 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d107      	bne.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d10f      	bne.n	800377a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003778:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e017      	b.n	80037be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3b01      	subs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d19b      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e0:	d111      	bne.n	8003806 <SPI_EndRxTransaction+0x3a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ea:	d004      	beq.n	80037f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f4:	d107      	bne.n	8003806 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380e:	d12a      	bne.n	8003866 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003818:	d012      	beq.n	8003840 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff ff49 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d02d      	beq.n	800388c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e026      	b.n	800388e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	2101      	movs	r1, #1
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff ff36 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01a      	beq.n	800388c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e013      	b.n	800388e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2200      	movs	r2, #0
 800386e:	2101      	movs	r1, #1
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff ff23 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e000      	b.n	800388e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <SPI_EndRxTxTransaction+0x7c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <SPI_EndRxTxTransaction+0x80>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0d5b      	lsrs	r3, r3, #21
 80038b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c2:	d112      	bne.n	80038ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff fef4 	bl	80036bc <SPI_WaitFlagStateUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e00f      	b.n	800390a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d0f2      	beq.n	80038ea <SPI_EndRxTxTransaction+0x52>
 8003904:	e000      	b.n	8003908 <SPI_EndRxTxTransaction+0x70>
        break;
 8003906:	bf00      	nop
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000
 8003918:	165e9f81 	.word	0x165e9f81

0800391c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e03f      	b.n	80039ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd f970 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800395e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f829 	bl	80039b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	b09f      	sub	sp, #124	; 0x7c
 80039be:	af00      	add	r7, sp, #0
 80039c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	68d9      	ldr	r1, [r3, #12]
 80039d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	ea40 0301 	orr.w	r3, r0, r1
 80039d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039fc:	f021 010c 	bic.w	r1, r1, #12
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a06:	430b      	orrs	r3, r1
 8003a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	6999      	ldr	r1, [r3, #24]
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	ea40 0301 	orr.w	r3, r0, r1
 8003a20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4bc5      	ldr	r3, [pc, #788]	; (8003d3c <UART_SetConfig+0x384>)
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d004      	beq.n	8003a36 <UART_SetConfig+0x7e>
 8003a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4bc3      	ldr	r3, [pc, #780]	; (8003d40 <UART_SetConfig+0x388>)
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d103      	bne.n	8003a3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a36:	f7ff faf1 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8003a3a:	6778      	str	r0, [r7, #116]	; 0x74
 8003a3c:	e002      	b.n	8003a44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a3e:	f7ff fad9 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8003a42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4c:	f040 80b6 	bne.w	8003bbc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a52:	461c      	mov	r4, r3
 8003a54:	f04f 0500 	mov.w	r5, #0
 8003a58:	4622      	mov	r2, r4
 8003a5a:	462b      	mov	r3, r5
 8003a5c:	1891      	adds	r1, r2, r2
 8003a5e:	6439      	str	r1, [r7, #64]	; 0x40
 8003a60:	415b      	adcs	r3, r3
 8003a62:	647b      	str	r3, [r7, #68]	; 0x44
 8003a64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a68:	1912      	adds	r2, r2, r4
 8003a6a:	eb45 0303 	adc.w	r3, r5, r3
 8003a6e:	f04f 0000 	mov.w	r0, #0
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	00d9      	lsls	r1, r3, #3
 8003a78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a7c:	00d0      	lsls	r0, r2, #3
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	1911      	adds	r1, r2, r4
 8003a84:	6639      	str	r1, [r7, #96]	; 0x60
 8003a86:	416b      	adcs	r3, r5
 8003a88:	667b      	str	r3, [r7, #100]	; 0x64
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	1891      	adds	r1, r2, r2
 8003a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a98:	415b      	adcs	r3, r3
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aa0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003aa4:	f7fc fb98 	bl	80001d8 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4ba5      	ldr	r3, [pc, #660]	; (8003d44 <UART_SetConfig+0x38c>)
 8003aae:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	011e      	lsls	r6, r3, #4
 8003ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab8:	461c      	mov	r4, r3
 8003aba:	f04f 0500 	mov.w	r5, #0
 8003abe:	4622      	mov	r2, r4
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	1891      	adds	r1, r2, r2
 8003ac4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ac6:	415b      	adcs	r3, r3
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ace:	1912      	adds	r2, r2, r4
 8003ad0:	eb45 0303 	adc.w	r3, r5, r3
 8003ad4:	f04f 0000 	mov.w	r0, #0
 8003ad8:	f04f 0100 	mov.w	r1, #0
 8003adc:	00d9      	lsls	r1, r3, #3
 8003ade:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ae2:	00d0      	lsls	r0, r2, #3
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	1911      	adds	r1, r2, r4
 8003aea:	65b9      	str	r1, [r7, #88]	; 0x58
 8003aec:	416b      	adcs	r3, r5
 8003aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	1891      	adds	r1, r2, r2
 8003afc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003afe:	415b      	adcs	r3, r3
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b0a:	f7fc fb65 	bl	80001d8 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <UART_SetConfig+0x38c>)
 8003b14:	fba3 1302 	umull	r1, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	2164      	movs	r1, #100	; 0x64
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	3332      	adds	r3, #50	; 0x32
 8003b26:	4a87      	ldr	r2, [pc, #540]	; (8003d44 <UART_SetConfig+0x38c>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b34:	441e      	add	r6, r3
 8003b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f04f 0100 	mov.w	r1, #0
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	1894      	adds	r4, r2, r2
 8003b44:	623c      	str	r4, [r7, #32]
 8003b46:	415b      	adcs	r3, r3
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b4e:	1812      	adds	r2, r2, r0
 8003b50:	eb41 0303 	adc.w	r3, r1, r3
 8003b54:	f04f 0400 	mov.w	r4, #0
 8003b58:	f04f 0500 	mov.w	r5, #0
 8003b5c:	00dd      	lsls	r5, r3, #3
 8003b5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b62:	00d4      	lsls	r4, r2, #3
 8003b64:	4622      	mov	r2, r4
 8003b66:	462b      	mov	r3, r5
 8003b68:	1814      	adds	r4, r2, r0
 8003b6a:	653c      	str	r4, [r7, #80]	; 0x50
 8003b6c:	414b      	adcs	r3, r1
 8003b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	461a      	mov	r2, r3
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	1891      	adds	r1, r2, r2
 8003b7c:	61b9      	str	r1, [r7, #24]
 8003b7e:	415b      	adcs	r3, r3
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b8a:	f7fc fb25 	bl	80001d8 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <UART_SetConfig+0x38c>)
 8003b94:	fba3 1302 	umull	r1, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2164      	movs	r1, #100	; 0x64
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	3332      	adds	r3, #50	; 0x32
 8003ba6:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <UART_SetConfig+0x38c>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 0207 	and.w	r2, r3, #7
 8003bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4432      	add	r2, r6
 8003bb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bba:	e0b9      	b.n	8003d30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bbe:	461c      	mov	r4, r3
 8003bc0:	f04f 0500 	mov.w	r5, #0
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	6139      	str	r1, [r7, #16]
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bd4:	1912      	adds	r2, r2, r4
 8003bd6:	eb45 0303 	adc.w	r3, r5, r3
 8003bda:	f04f 0000 	mov.w	r0, #0
 8003bde:	f04f 0100 	mov.w	r1, #0
 8003be2:	00d9      	lsls	r1, r3, #3
 8003be4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be8:	00d0      	lsls	r0, r2, #3
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	eb12 0804 	adds.w	r8, r2, r4
 8003bf2:	eb43 0905 	adc.w	r9, r3, r5
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	008b      	lsls	r3, r1, #2
 8003c0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c0e:	0082      	lsls	r2, r0, #2
 8003c10:	4640      	mov	r0, r8
 8003c12:	4649      	mov	r1, r9
 8003c14:	f7fc fae0 	bl	80001d8 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <UART_SetConfig+0x38c>)
 8003c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	011e      	lsls	r6, r3, #4
 8003c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	1894      	adds	r4, r2, r2
 8003c34:	60bc      	str	r4, [r7, #8]
 8003c36:	415b      	adcs	r3, r3
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c3e:	1812      	adds	r2, r2, r0
 8003c40:	eb41 0303 	adc.w	r3, r1, r3
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	f04f 0500 	mov.w	r5, #0
 8003c4c:	00dd      	lsls	r5, r3, #3
 8003c4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c52:	00d4      	lsls	r4, r2, #3
 8003c54:	4622      	mov	r2, r4
 8003c56:	462b      	mov	r3, r5
 8003c58:	1814      	adds	r4, r2, r0
 8003c5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c5c:	414b      	adcs	r3, r1
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	008b      	lsls	r3, r1, #2
 8003c74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c78:	0082      	lsls	r2, r0, #2
 8003c7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c7e:	f7fc faab 	bl	80001d8 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <UART_SetConfig+0x38c>)
 8003c88:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	2164      	movs	r1, #100	; 0x64
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	3332      	adds	r3, #50	; 0x32
 8003c9a:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <UART_SetConfig+0x38c>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca6:	441e      	add	r6, r3
 8003ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003caa:	4618      	mov	r0, r3
 8003cac:	f04f 0100 	mov.w	r1, #0
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	1894      	adds	r4, r2, r2
 8003cb6:	603c      	str	r4, [r7, #0]
 8003cb8:	415b      	adcs	r3, r3
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc0:	1812      	adds	r2, r2, r0
 8003cc2:	eb41 0303 	adc.w	r3, r1, r3
 8003cc6:	f04f 0400 	mov.w	r4, #0
 8003cca:	f04f 0500 	mov.w	r5, #0
 8003cce:	00dd      	lsls	r5, r3, #3
 8003cd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd4:	00d4      	lsls	r4, r2, #3
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	462b      	mov	r3, r5
 8003cda:	eb12 0a00 	adds.w	sl, r2, r0
 8003cde:	eb43 0b01 	adc.w	fp, r3, r1
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	008b      	lsls	r3, r1, #2
 8003cf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cfa:	0082      	lsls	r2, r0, #2
 8003cfc:	4650      	mov	r0, sl
 8003cfe:	4659      	mov	r1, fp
 8003d00:	f7fc fa6a 	bl	80001d8 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <UART_SetConfig+0x38c>)
 8003d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2164      	movs	r1, #100	; 0x64
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	3332      	adds	r3, #50	; 0x32
 8003d1c:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <UART_SetConfig+0x38c>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4432      	add	r2, r6
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	bf00      	nop
 8003d32:	377c      	adds	r7, #124	; 0x7c
 8003d34:	46bd      	mov	sp, r7
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	40011400 	.word	0x40011400
 8003d44:	51eb851f 	.word	0x51eb851f

08003d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d48:	b084      	sub	sp, #16
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	f107 001c 	add.w	r0, r7, #28
 8003d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d122      	bne.n	8003da6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 fb1c 	bl	80053d8 <USB_CoreReset>
 8003da0:	4603      	mov	r3, r0
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	e01a      	b.n	8003ddc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 fb10 	bl	80053d8 <USB_CoreReset>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8003dce:	e005      	b.n	8003ddc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10b      	bne.n	8003dfa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f043 0206 	orr.w	r2, r3, #6
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e06:	b004      	add	sp, #16
 8003e08:	4770      	bx	lr
	...

08003e0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d165      	bne.n	8003eec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4a41      	ldr	r2, [pc, #260]	; (8003f28 <USB_SetTurnaroundTime+0x11c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d906      	bls.n	8003e36 <USB_SetTurnaroundTime+0x2a>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <USB_SetTurnaroundTime+0x120>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d202      	bcs.n	8003e36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e30:	230f      	movs	r3, #15
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e062      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <USB_SetTurnaroundTime+0x120>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d306      	bcc.n	8003e4c <USB_SetTurnaroundTime+0x40>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <USB_SetTurnaroundTime+0x124>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d202      	bcs.n	8003e4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e46:	230e      	movs	r3, #14
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e057      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4a38      	ldr	r2, [pc, #224]	; (8003f30 <USB_SetTurnaroundTime+0x124>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d306      	bcc.n	8003e62 <USB_SetTurnaroundTime+0x56>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4a37      	ldr	r2, [pc, #220]	; (8003f34 <USB_SetTurnaroundTime+0x128>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d202      	bcs.n	8003e62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e5c:	230d      	movs	r3, #13
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e04c      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4a33      	ldr	r2, [pc, #204]	; (8003f34 <USB_SetTurnaroundTime+0x128>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d306      	bcc.n	8003e78 <USB_SetTurnaroundTime+0x6c>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a32      	ldr	r2, [pc, #200]	; (8003f38 <USB_SetTurnaroundTime+0x12c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d802      	bhi.n	8003e78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e72:	230c      	movs	r3, #12
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	e041      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4a2f      	ldr	r2, [pc, #188]	; (8003f38 <USB_SetTurnaroundTime+0x12c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d906      	bls.n	8003e8e <USB_SetTurnaroundTime+0x82>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4a2e      	ldr	r2, [pc, #184]	; (8003f3c <USB_SetTurnaroundTime+0x130>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d802      	bhi.n	8003e8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e88:	230b      	movs	r3, #11
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e036      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <USB_SetTurnaroundTime+0x130>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d906      	bls.n	8003ea4 <USB_SetTurnaroundTime+0x98>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <USB_SetTurnaroundTime+0x134>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d802      	bhi.n	8003ea4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e02b      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <USB_SetTurnaroundTime+0x134>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d906      	bls.n	8003eba <USB_SetTurnaroundTime+0xae>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <USB_SetTurnaroundTime+0x138>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d202      	bcs.n	8003eba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003eb4:	2309      	movs	r3, #9
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e020      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <USB_SetTurnaroundTime+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d306      	bcc.n	8003ed0 <USB_SetTurnaroundTime+0xc4>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <USB_SetTurnaroundTime+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d802      	bhi.n	8003ed0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003eca:	2308      	movs	r3, #8
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e015      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <USB_SetTurnaroundTime+0x13c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d906      	bls.n	8003ee6 <USB_SetTurnaroundTime+0xda>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <USB_SetTurnaroundTime+0x140>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d202      	bcs.n	8003ee6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ee0:	2307      	movs	r3, #7
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e00a      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e007      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ef2:	2309      	movs	r3, #9
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e001      	b.n	8003efc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ef8:	2309      	movs	r3, #9
 8003efa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	029b      	lsls	r3, r3, #10
 8003f10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f14:	431a      	orrs	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	00d8acbf 	.word	0x00d8acbf
 8003f2c:	00e4e1c0 	.word	0x00e4e1c0
 8003f30:	00f42400 	.word	0x00f42400
 8003f34:	01067380 	.word	0x01067380
 8003f38:	011a499f 	.word	0x011a499f
 8003f3c:	01312cff 	.word	0x01312cff
 8003f40:	014ca43f 	.word	0x014ca43f
 8003f44:	016e3600 	.word	0x016e3600
 8003f48:	01a6ab1f 	.word	0x01a6ab1f
 8003f4c:	01e84800 	.word	0x01e84800

08003f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d115      	bne.n	8003fe2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	f7fc ff68 	bl	8000e98 <HAL_Delay>
      ms++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f001 f972 	bl	80052b8 <USB_GetMode>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d01e      	beq.n	8004018 <USB_SetCurrentMode+0x84>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b31      	cmp	r3, #49	; 0x31
 8003fde:	d9f0      	bls.n	8003fc2 <USB_SetCurrentMode+0x2e>
 8003fe0:	e01a      	b.n	8004018 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d115      	bne.n	8004014 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f7fc ff4f 	bl	8000e98 <HAL_Delay>
      ms++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f001 f959 	bl	80052b8 <USB_GetMode>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <USB_SetCurrentMode+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b31      	cmp	r3, #49	; 0x31
 8004010:	d9f0      	bls.n	8003ff4 <USB_SetCurrentMode+0x60>
 8004012:	e001      	b.n	8004018 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e005      	b.n	8004024 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b32      	cmp	r3, #50	; 0x32
 800401c:	d101      	bne.n	8004022 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800402c:	b084      	sub	sp, #16
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800403a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e009      	b.n	8004060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	2200      	movs	r2, #0
 8004058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3301      	adds	r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0e      	cmp	r3, #14
 8004064:	d9f2      	bls.n	800404c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d11c      	bne.n	80040a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407a:	f043 0302 	orr.w	r3, r3, #2
 800407e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
 80040a4:	e00b      	b.n	80040be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	4619      	mov	r1, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	461a      	mov	r2, r3
 80040da:	680b      	ldr	r3, [r1, #0]
 80040dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10c      	bne.n	80040fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ea:	2100      	movs	r1, #0
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f945 	bl	800437c <USB_SetDevSpeed>
 80040f2:	e008      	b.n	8004106 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040f4:	2101      	movs	r1, #1
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f940 	bl	800437c <USB_SetDevSpeed>
 80040fc:	e003      	b.n	8004106 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040fe:	2103      	movs	r1, #3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f93b 	bl	800437c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004106:	2110      	movs	r1, #16
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8f3 	bl	80042f4 <USB_FlushTxFifo>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f90f 	bl	800433c <USB_FlushRxFifo>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	461a      	mov	r2, r3
 8004130:	2300      	movs	r3, #0
 8004132:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	461a      	mov	r2, r3
 8004148:	2300      	movs	r3, #0
 800414a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e043      	b.n	80041da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004168:	d118      	bne.n	800419c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417c:	461a      	mov	r2, r3
 800417e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e013      	b.n	80041ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	461a      	mov	r2, r3
 8004194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e008      	b.n	80041ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	461a      	mov	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	461a      	mov	r2, r3
 80041ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3301      	adds	r3, #1
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d3b7      	bcc.n	8004152 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e043      	b.n	8004270 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fe:	d118      	bne.n	8004232 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	461a      	mov	r2, r3
 8004214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e013      	b.n	8004244 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	461a      	mov	r2, r3
 800422a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e008      	b.n	8004244 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	461a      	mov	r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	2300      	movs	r3, #0
 8004254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	461a      	mov	r2, r3
 8004264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	3301      	adds	r3, #1
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d3b7      	bcc.n	80041e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f043 0210 	orr.w	r2, r3, #16
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <USB_DevInit+0x2c4>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f043 0208 	orr.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ec:	b004      	add	sp, #16
 80042ee:	4770      	bx	lr
 80042f0:	803c3800 	.word	0x803c3800

080042f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	4a08      	ldr	r2, [pc, #32]	; (8004338 <USB_FlushTxFifo+0x44>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e006      	b.n	800432c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d0f1      	beq.n	800430e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	00030d40 	.word	0x00030d40

0800433c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2210      	movs	r2, #16
 800434c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3301      	adds	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	4a08      	ldr	r2, [pc, #32]	; (8004378 <USB_FlushRxFifo+0x3c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e006      	b.n	800436c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d0f1      	beq.n	800434e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	00030d40 	.word	0x00030d40

0800437c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0306 	and.w	r3, r3, #6
 80043c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
 80043d2:	e00a      	b.n	80043ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d002      	beq.n	80043e0 <USB_GetDevSpeed+0x32>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b06      	cmp	r3, #6
 80043de:	d102      	bne.n	80043e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043e0:	2302      	movs	r3, #2
 80043e2:	75fb      	strb	r3, [r7, #23]
 80043e4:	e001      	b.n	80043ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043e6:	230f      	movs	r3, #15
 80043e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d13a      	bne.n	800448a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	b29b      	uxth	r3, r3
 800442c:	68f9      	ldr	r1, [r7, #12]
 800442e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004432:	4313      	orrs	r3, r2
 8004434:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d155      	bne.n	80044f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	78db      	ldrb	r3, [r3, #3]
 8004466:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004468:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	059b      	lsls	r3, r3, #22
 800446e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004470:	4313      	orrs	r3, r2
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e036      	b.n	80044f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11a      	bne.n	80044f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	78db      	ldrb	r3, [r3, #3]
 80044dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044de:	430b      	orrs	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	0151      	lsls	r1, r2, #5
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	440a      	add	r2, r1
 80044ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d161      	bne.n	80045e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453a:	d11f      	bne.n	800457c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	0151      	lsls	r1, r2, #5
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	440a      	add	r2, r1
 8004552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004556:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800455a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800457a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	b29b      	uxth	r3, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800459c:	4013      	ands	r3, r2
 800459e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c0:	4013      	ands	r3, r2
 80045c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	0159      	lsls	r1, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	440b      	add	r3, r1
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	4619      	mov	r1, r3
 80045e0:	4b35      	ldr	r3, [pc, #212]	; (80046b8 <USB_DeactivateEndpoint+0x1b0>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
 80045e6:	e060      	b.n	80046aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045fe:	d11f      	bne.n	8004640 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800461e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800463e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	2101      	movs	r1, #1
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	43db      	mvns	r3, r3
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004660:	4013      	ands	r3, r2
 8004662:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	2101      	movs	r1, #1
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	43db      	mvns	r3, r3
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004684:	4013      	ands	r3, r2
 8004686:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	0159      	lsls	r1, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	440b      	add	r3, r1
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	4619      	mov	r1, r3
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <USB_DeactivateEndpoint+0x1b4>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	ec337800 	.word	0xec337800
 80046bc:	eff37800 	.word	0xeff37800

080046c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	4613      	mov	r3, r2
 80046cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f040 815c 	bne.w	800499a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d132      	bne.n	8004750 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	0151      	lsls	r1, r2, #5
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	440a      	add	r2, r1
 8004700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004704:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004708:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800470c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800472c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	440a      	add	r2, r1
 8004744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004748:	0cdb      	lsrs	r3, r3, #19
 800474a:	04db      	lsls	r3, r3, #19
 800474c:	6113      	str	r3, [r2, #16]
 800474e:	e074      	b.n	800483a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476a:	0cdb      	lsrs	r3, r3, #19
 800476c:	04db      	lsls	r3, r3, #19
 800476e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800478e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6959      	ldr	r1, [r3, #20]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	440b      	add	r3, r1
 80047ac:	1e59      	subs	r1, r3, #1
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047b8:	4b9d      	ldr	r3, [pc, #628]	; (8004a30 <USB_EPStartXfer+0x370>)
 80047ba:	400b      	ands	r3, r1
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	0148      	lsls	r0, r1, #5
 80047c0:	69f9      	ldr	r1, [r7, #28]
 80047c2:	4401      	add	r1, r0
 80047c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047c8:	4313      	orrs	r3, r2
 80047ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e2:	69b9      	ldr	r1, [r7, #24]
 80047e4:	0148      	lsls	r0, r1, #5
 80047e6:	69f9      	ldr	r1, [r7, #28]
 80047e8:	4401      	add	r1, r0
 80047ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047ee:	4313      	orrs	r3, r2
 80047f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	78db      	ldrb	r3, [r3, #3]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d11f      	bne.n	800483a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004814:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004818:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004838:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d14b      	bne.n	80048d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	461a      	mov	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d128      	bne.n	80048b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	440a      	add	r2, r1
 800488a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	e00f      	b.n	80048b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e12f      	b.n	8004b38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d015      	beq.n	800492c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8117 	beq.w	8004b38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	2101      	movs	r1, #1
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	69f9      	ldr	r1, [r7, #28]
 8004922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004926:	4313      	orrs	r3, r2
 8004928:	634b      	str	r3, [r1, #52]	; 0x34
 800492a:	e105      	b.n	8004b38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d110      	bne.n	800495e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e00f      	b.n	800497e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	68d9      	ldr	r1, [r3, #12]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	b298      	uxth	r0, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4603      	mov	r3, r0
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa2b 	bl	8004dee <USB_WritePacket>
 8004998:	e0ce      	b.n	8004b38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	0cdb      	lsrs	r3, r3, #19
 80049b6:	04db      	lsls	r3, r3, #19
 80049b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d126      	bne.n	8004a34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	0148      	lsls	r0, r1, #5
 8004a00:	69f9      	ldr	r1, [r7, #28]
 8004a02:	4401      	add	r1, r0
 8004a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a2a:	6113      	str	r3, [r2, #16]
 8004a2c:	e036      	b.n	8004a9c <USB_EPStartXfer+0x3dc>
 8004a2e:	bf00      	nop
 8004a30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	8afb      	ldrh	r3, [r7, #22]
 8004a5a:	04d9      	lsls	r1, r3, #19
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <USB_EPStartXfer+0x484>)
 8004a5e:	400b      	ands	r3, r1
 8004a60:	69b9      	ldr	r1, [r7, #24]
 8004a62:	0148      	lsls	r0, r1, #5
 8004a64:	69f9      	ldr	r1, [r7, #28]
 8004a66:	4401      	add	r1, r0
 8004a68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	8af9      	ldrh	r1, [r7, #22]
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	0148      	lsls	r0, r1, #5
 8004a90:	69f9      	ldr	r1, [r7, #28]
 8004a92:	4401      	add	r1, r0
 8004a94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d10d      	bne.n	8004abe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	68d9      	ldr	r1, [r3, #12]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	460a      	mov	r2, r1
 8004abc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	78db      	ldrb	r3, [r3, #3]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d128      	bne.n	8004b18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d110      	bne.n	8004af8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e00f      	b.n	8004b18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	1ff80000 	.word	0x1ff80000

08004b48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	f040 80cd 	bne.w	8004d04 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d132      	bne.n	8004bd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	0151      	lsls	r1, r2, #5
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	440a      	add	r2, r1
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd0:	0cdb      	lsrs	r3, r3, #19
 8004bd2:	04db      	lsls	r3, r3, #19
 8004bd4:	6113      	str	r3, [r2, #16]
 8004bd6:	e04e      	b.n	8004c76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf2:	0cdb      	lsrs	r3, r3, #19
 8004bf4:	04db      	lsls	r3, r3, #19
 8004bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d903      	bls.n	8004c30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c66:	6939      	ldr	r1, [r7, #16]
 8004c68:	0148      	lsls	r0, r1, #5
 8004c6a:	6979      	ldr	r1, [r7, #20]
 8004c6c:	4401      	add	r1, r0
 8004c6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c72:	4313      	orrs	r3, r2
 8004c74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d11e      	bne.n	8004cba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	461a      	mov	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e092      	b.n	8004de0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d07e      	beq.n	8004de0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	634b      	str	r3, [r1, #52]	; 0x34
 8004d02:	e06d      	b.n	8004de0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1e:	0cdb      	lsrs	r3, r3, #19
 8004d20:	04db      	lsls	r3, r3, #19
 8004d22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d46:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8e:	6939      	ldr	r1, [r7, #16]
 8004d90:	0148      	lsls	r0, r1, #5
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	4401      	add	r1, r0
 8004d96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10d      	bne.n	8004dc0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	68d9      	ldr	r1, [r3, #12]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	460a      	mov	r2, r1
 8004dbe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b089      	sub	sp, #36	; 0x24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	71fb      	strb	r3, [r7, #7]
 8004e00:	4613      	mov	r3, r2
 8004e02:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d123      	bne.n	8004e5c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e14:	88bb      	ldrh	r3, [r7, #4]
 8004e16:	3303      	adds	r3, #3
 8004e18:	089b      	lsrs	r3, r3, #2
 8004e1a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e018      	b.n	8004e54 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	031a      	lsls	r2, r3, #12
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2e:	461a      	mov	r2, r3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	3301      	adds	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	3301      	adds	r3, #1
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d3e2      	bcc.n	8004e22 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3724      	adds	r7, #36	; 0x24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b08b      	sub	sp, #44	; 0x2c
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	4613      	mov	r3, r2
 8004e76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e90:	2300      	movs	r3, #0
 8004e92:	623b      	str	r3, [r7, #32]
 8004e94:	e014      	b.n	8004ec0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	3301      	adds	r3, #1
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d3e6      	bcc.n	8004e96 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ec8:	8bfb      	ldrh	r3, [r7, #30]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01e      	beq.n	8004f0c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f107 0310 	add.w	r3, r7, #16
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	fa22 f303 	lsr.w	r3, r2, r3
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	701a      	strb	r2, [r3, #0]
      i++;
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	623b      	str	r3, [r7, #32]
      pDest++;
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	3301      	adds	r3, #1
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f00:	8bfb      	ldrh	r3, [r7, #30]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f06:	8bfb      	ldrh	r3, [r7, #30]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ea      	bne.n	8004ee2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	372c      	adds	r7, #44	; 0x2c
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d12c      	bne.n	8004f90 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db12      	blt.n	8004f6e <USB_EPSetStall+0x54>
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00f      	beq.n	8004f6e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f6c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e02b      	b.n	8004fe8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db12      	blt.n	8004fc8 <USB_EPSetStall+0xae>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00f      	beq.n	8004fc8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	0151      	lsls	r1, r2, #5
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	440a      	add	r2, r1
 8004fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fc6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d128      	bne.n	8005064 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005030:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	78db      	ldrb	r3, [r3, #3]
 8005036:	2b03      	cmp	r3, #3
 8005038:	d003      	beq.n	8005042 <USB_EPClearStall+0x4c>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d138      	bne.n	80050b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e027      	b.n	80050b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005082:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d003      	beq.n	8005094 <USB_EPClearStall+0x9e>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	78db      	ldrb	r3, [r3, #3]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d10f      	bne.n	80050b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	460b      	mov	r3, r1
 80050cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005128:	f023 0303 	bic.w	r3, r3, #3
 800512c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800513c:	f023 0302 	bic.w	r3, r3, #2
 8005140:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517e:	f043 0302 	orr.w	r3, r3, #2
 8005182:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	0c1b      	lsrs	r3, r3, #16
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	b29b      	uxth	r3, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800524e:	68bb      	ldr	r3, [r7, #8]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	01db      	lsls	r3, r3, #7
 800528e:	b2db      	uxtb	r3, r3
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052aa:	68bb      	ldr	r3, [r7, #8]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0301 	and.w	r3, r3, #1
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	460b      	mov	r3, r1
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	333c      	adds	r3, #60	; 0x3c
 8005332:	3304      	adds	r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <USB_EP0_OutStart+0xb8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d90a      	bls.n	8005356 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800534c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005350:	d101      	bne.n	8005356 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	e037      	b.n	80053c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005374:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005384:	f043 0318 	orr.w	r3, r3, #24
 8005388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005398:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800539c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800539e:	7afb      	ldrb	r3, [r7, #11]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d10f      	bne.n	80053c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	4f54300a 	.word	0x4f54300a

080053d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3301      	adds	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	4a13      	ldr	r2, [pc, #76]	; (8005438 <USB_CoreReset+0x60>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e01a      	b.n	800542a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	daf3      	bge.n	80053e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <USB_CoreReset+0x60>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e006      	b.n	800542a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d0f1      	beq.n	800540c <USB_CoreReset+0x34>

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	00030d40 	.word	0x00030d40

0800543c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005448:	2010      	movs	r0, #16
 800544a:	f001 ff03 	bl	8007254 <USBD_static_malloc>
 800544e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d105      	bne.n	8005462 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800545e:	2302      	movs	r3, #2
 8005460:	e01b      	b.n	800549a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7c1b      	ldrb	r3, [r3, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2207      	movs	r2, #7
 8005476:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005478:	e002      	b.n	8005480 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	220a      	movs	r2, #10
 800547e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005480:	2304      	movs	r3, #4
 8005482:	2203      	movs	r2, #3
 8005484:	2181      	movs	r1, #129	; 0x81
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fdd3 	bl	8007032 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	460b      	mov	r3, r1
 80054ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80054ae:	2181      	movs	r1, #129	; 0x81
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 fde4 	bl	800707e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 fecc 	bl	8007270 <USBD_static_free>
    pdev->pClassData = NULL;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054fc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800550c:	2303      	movs	r3, #3
 800550e:	e0e8      	b.n	80056e2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005518:	2b00      	cmp	r3, #0
 800551a:	d046      	beq.n	80055aa <USBD_HID_Setup+0xbe>
 800551c:	2b20      	cmp	r3, #32
 800551e:	f040 80d8 	bne.w	80056d2 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	3b02      	subs	r3, #2
 8005528:	2b09      	cmp	r3, #9
 800552a:	d836      	bhi.n	800559a <USBD_HID_Setup+0xae>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <USBD_HID_Setup+0x48>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	0800558b 	.word	0x0800558b
 8005538:	0800556b 	.word	0x0800556b
 800553c:	0800559b 	.word	0x0800559b
 8005540:	0800559b 	.word	0x0800559b
 8005544:	0800559b 	.word	0x0800559b
 8005548:	0800559b 	.word	0x0800559b
 800554c:	0800559b 	.word	0x0800559b
 8005550:	0800559b 	.word	0x0800559b
 8005554:	08005579 	.word	0x08005579
 8005558:	0800555d 	.word	0x0800555d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	885b      	ldrh	r3, [r3, #2]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	601a      	str	r2, [r3, #0]
          break;
 8005568:	e01e      	b.n	80055a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 fa22 	bl	80069ba <USBD_CtlSendData>
          break;
 8005576:	e017      	b.n	80055a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	885b      	ldrh	r3, [r3, #2]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	b29b      	uxth	r3, r3
 8005580:	b2db      	uxtb	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	605a      	str	r2, [r3, #4]
          break;
 8005588:	e00e      	b.n	80055a8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3304      	adds	r3, #4
 800558e:	2201      	movs	r2, #1
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 fa11 	bl	80069ba <USBD_CtlSendData>
          break;
 8005598:	e006      	b.n	80055a8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800559a:	6839      	ldr	r1, [r7, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 f99b 	bl	80068d8 <USBD_CtlError>
          ret = USBD_FAIL;
 80055a2:	2303      	movs	r3, #3
 80055a4:	75fb      	strb	r3, [r7, #23]
          break;
 80055a6:	bf00      	nop
      }
      break;
 80055a8:	e09a      	b.n	80056e0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	2b0b      	cmp	r3, #11
 80055b0:	f200 8086 	bhi.w	80056c0 <USBD_HID_Setup+0x1d4>
 80055b4:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <USBD_HID_Setup+0xd0>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055ed 	.word	0x080055ed
 80055c0:	080056cf 	.word	0x080056cf
 80055c4:	080056c1 	.word	0x080056c1
 80055c8:	080056c1 	.word	0x080056c1
 80055cc:	080056c1 	.word	0x080056c1
 80055d0:	080056c1 	.word	0x080056c1
 80055d4:	08005617 	.word	0x08005617
 80055d8:	080056c1 	.word	0x080056c1
 80055dc:	080056c1 	.word	0x080056c1
 80055e0:	080056c1 	.word	0x080056c1
 80055e4:	0800566f 	.word	0x0800566f
 80055e8:	08005699 	.word	0x08005699
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d107      	bne.n	8005608 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055f8:	f107 030a 	add.w	r3, r7, #10
 80055fc:	2202      	movs	r2, #2
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 f9da 	bl	80069ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005606:	e063      	b.n	80056d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 f964 	bl	80068d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005610:	2303      	movs	r3, #3
 8005612:	75fb      	strb	r3, [r7, #23]
          break;
 8005614:	e05c      	b.n	80056d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	885b      	ldrh	r3, [r3, #2]
 800561a:	0a1b      	lsrs	r3, r3, #8
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b22      	cmp	r3, #34	; 0x22
 8005620:	d108      	bne.n	8005634 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	88db      	ldrh	r3, [r3, #6]
 8005626:	2b3f      	cmp	r3, #63	; 0x3f
 8005628:	bf28      	it	cs
 800562a:	233f      	movcs	r3, #63	; 0x3f
 800562c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800562e:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <USBD_HID_Setup+0x200>)
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	e015      	b.n	8005660 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	885b      	ldrh	r3, [r3, #2]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b21      	cmp	r3, #33	; 0x21
 800563e:	d108      	bne.n	8005652 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <USBD_HID_Setup+0x204>)
 8005642:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	88db      	ldrh	r3, [r3, #6]
 8005648:	2b09      	cmp	r3, #9
 800564a:	bf28      	it	cs
 800564c:	2309      	movcs	r3, #9
 800564e:	82bb      	strh	r3, [r7, #20]
 8005650:	e006      	b.n	8005660 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 f93f 	bl	80068d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800565a:	2303      	movs	r3, #3
 800565c:	75fb      	strb	r3, [r7, #23]
            break;
 800565e:	e037      	b.n	80056d0 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005660:	8abb      	ldrh	r3, [r7, #20]
 8005662:	461a      	mov	r2, r3
 8005664:	6939      	ldr	r1, [r7, #16]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f001 f9a7 	bl	80069ba <USBD_CtlSendData>
          break;
 800566c:	e030      	b.n	80056d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d107      	bne.n	800568a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3308      	adds	r3, #8
 800567e:	2201      	movs	r2, #1
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 f999 	bl	80069ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005688:	e022      	b.n	80056d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 f923 	bl	80068d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005692:	2303      	movs	r3, #3
 8005694:	75fb      	strb	r3, [r7, #23]
          break;
 8005696:	e01b      	b.n	80056d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d106      	bne.n	80056b2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	885b      	ldrh	r3, [r3, #2]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056b0:	e00e      	b.n	80056d0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 f90f 	bl	80068d8 <USBD_CtlError>
            ret = USBD_FAIL;
 80056ba:	2303      	movs	r3, #3
 80056bc:	75fb      	strb	r3, [r7, #23]
          break;
 80056be:	e007      	b.n	80056d0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 f908 	bl	80068d8 <USBD_CtlError>
          ret = USBD_FAIL;
 80056c8:	2303      	movs	r3, #3
 80056ca:	75fb      	strb	r3, [r7, #23]
          break;
 80056cc:	e000      	b.n	80056d0 <USBD_HID_Setup+0x1e4>
          break;
 80056ce:	bf00      	nop
      }
      break;
 80056d0:	e006      	b.n	80056e0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 f8ff 	bl	80068d8 <USBD_CtlError>
      ret = USBD_FAIL;
 80056da:	2303      	movs	r3, #3
 80056dc:	75fb      	strb	r3, [r7, #23]
      break;
 80056de:	bf00      	nop
  }

  return (uint8_t)ret;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200000c8 	.word	0x200000c8
 80056f0:	200000b0 	.word	0x200000b0

080056f4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005708:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8005710:	2303      	movs	r3, #3
 8005712:	e013      	b.n	800573c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b03      	cmp	r3, #3
 800571e:	d10c      	bne.n	800573a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	7b1b      	ldrb	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d108      	bne.n	800573a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2201      	movs	r2, #1
 800572c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	2181      	movs	r1, #129	; 0x81
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f001 fd4a 	bl	80071ce <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2222      	movs	r2, #34	; 0x22
 8005750:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8005752:	4b03      	ldr	r3, [pc, #12]	; (8005760 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000044 	.word	0x20000044

08005764 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2222      	movs	r2, #34	; 0x22
 8005770:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8005772:	4b03      	ldr	r3, [pc, #12]	; (8005780 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000068 	.word	0x20000068

08005784 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2222      	movs	r2, #34	; 0x22
 8005790:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8005792:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	2000008c 	.word	0x2000008c

080057a4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b6:	2200      	movs	r2, #0
 80057b8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	220a      	movs	r2, #10
 80057d4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80057d6:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	200000bc 	.word	0x200000bc

080057e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e01f      	b.n	8005840 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	79fa      	ldrb	r2, [r7, #7]
 8005832:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f001 fb95 	bl	8006f64 <USBD_LL_Init>
 800583a:	4603      	mov	r3, r0
 800583c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800583e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800585c:	2303      	movs	r3, #3
 800585e:	e016      	b.n	800588e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	f107 020e 	add.w	r2, r7, #14
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	4602      	mov	r2, r0
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 fbac 	bl	8006ffc <USBD_LL_Start>
 80058a4:	4603      	mov	r3, r0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80058d0:	2303      	movs	r3, #3
 80058d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	78fa      	ldrb	r2, [r7, #3]
 80058e8:	4611      	mov	r1, r2
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	4611      	mov	r1, r2
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
  }

  return USBD_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ff90 	bl	8006864 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2b02      	cmp	r3, #2
 8005966:	d01a      	beq.n	800599e <USBD_LL_SetupStage+0x72>
 8005968:	2b02      	cmp	r3, #2
 800596a:	d822      	bhi.n	80059b2 <USBD_LL_SetupStage+0x86>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <USBD_LL_SetupStage+0x4a>
 8005970:	2b01      	cmp	r3, #1
 8005972:	d00a      	beq.n	800598a <USBD_LL_SetupStage+0x5e>
 8005974:	e01d      	b.n	80059b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa62 	bl	8005e48 <USBD_StdDevReq>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e020      	b.n	80059cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fac6 	bl	8005f24 <USBD_StdItfReq>
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]
      break;
 800599c:	e016      	b.n	80059cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fb05 	bl	8005fb6 <USBD_StdEPReq>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	e00c      	b.n	80059cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fb7b 	bl	80070bc <USBD_LL_StallEP>
 80059c6:	4603      	mov	r3, r0
 80059c8:	73fb      	strb	r3, [r7, #15]
      break;
 80059ca:	bf00      	nop
  }

  return ret;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	460b      	mov	r3, r1
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d138      	bne.n	8005a5c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d14a      	bne.n	8005a92 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d913      	bls.n	8005a30 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	bf28      	it	cs
 8005a22:	4613      	movcs	r3, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fff2 	bl	8006a12 <USBD_CtlContinueRx>
 8005a2e:	e030      	b.n	8005a92 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d10b      	bne.n	8005a54 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 ffed 	bl	8006a34 <USBD_CtlSendStatus>
 8005a5a:	e01a      	b.n	8005a92 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d114      	bne.n	8005a92 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	7afa      	ldrb	r2, [r7, #11]
 8005a7e:	4611      	mov	r1, r2
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	4798      	blx	r3
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	e000      	b.n	8005a94 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005aaa:	7afb      	ldrb	r3, [r7, #11]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d16b      	bne.n	8005b88 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3314      	adds	r3, #20
 8005ab4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d156      	bne.n	8005b6e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d914      	bls.n	8005af6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 ff84 	bl	80069f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2200      	movs	r2, #0
 8005aec:	2100      	movs	r1, #0
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f001 fb8e 	bl	8007210 <USBD_LL_PrepareReceive>
 8005af4:	e03b      	b.n	8005b6e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d11c      	bne.n	8005b3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d316      	bcc.n	8005b3c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d20f      	bcs.n	8005b3c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2100      	movs	r1, #0
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 ff65 	bl	80069f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	2200      	movs	r2, #0
 8005b32:	2100      	movs	r1, #0
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f001 fb6b 	bl	8007210 <USBD_LL_PrepareReceive>
 8005b3a:	e018      	b.n	8005b6e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d10b      	bne.n	8005b60 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b60:	2180      	movs	r1, #128	; 0x80
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f001 faaa 	bl	80070bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 ff76 	bl	8006a5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d122      	bne.n	8005bbe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fe98 	bl	80058ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b86:	e01a      	b.n	8005bbe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d114      	bne.n	8005bbe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00e      	beq.n	8005bbe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	7afa      	ldrb	r2, [r7, #11]
 8005baa:	4611      	mov	r1, r2
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	4798      	blx	r3
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	e000      	b.n	8005bc0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e02f      	b.n	8005c5c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00f      	beq.n	8005c26 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6852      	ldr	r2, [r2, #4]
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	4611      	mov	r1, r2
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 fa00 	bl	8007032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2240      	movs	r2, #64	; 0x40
 8005c3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c42:	2340      	movs	r3, #64	; 0x40
 8005c44:	2200      	movs	r2, #0
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f9f2 	bl	8007032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2240      	movs	r2, #64	; 0x40
 8005c58:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2204      	movs	r2, #4
 8005c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d106      	bne.n	8005cd2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e012      	b.n	8005d1c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d10b      	bne.n	8005d1a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e014      	b.n	8005d68 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d10d      	bne.n	8005d66 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	4611      	mov	r1, r2
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e014      	b.n	8005db4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d10d      	bne.n	8005db2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	4611      	mov	r1, r2
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6852      	ldr	r2, [r2, #4]
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
  }

  return USBD_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b087      	sub	sp, #28
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e28:	8a3b      	ldrh	r3, [r7, #16]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	b21a      	sxth	r2, r3
 8005e2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	b21b      	sxth	r3, r3
 8005e36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e38:	89fb      	ldrh	r3, [r7, #14]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d005      	beq.n	8005e6e <USBD_StdDevReq+0x26>
 8005e62:	2b40      	cmp	r3, #64	; 0x40
 8005e64:	d853      	bhi.n	8005f0e <USBD_StdDevReq+0xc6>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <USBD_StdDevReq+0x3a>
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d14f      	bne.n	8005f0e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	4798      	blx	r3
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e04a      	b.n	8005f18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	2b09      	cmp	r3, #9
 8005e88:	d83b      	bhi.n	8005f02 <USBD_StdDevReq+0xba>
 8005e8a:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <USBD_StdDevReq+0x48>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005ef9 	.word	0x08005ef9
 8005e98:	08005f03 	.word	0x08005f03
 8005e9c:	08005eef 	.word	0x08005eef
 8005ea0:	08005f03 	.word	0x08005f03
 8005ea4:	08005ec3 	.word	0x08005ec3
 8005ea8:	08005eb9 	.word	0x08005eb9
 8005eac:	08005f03 	.word	0x08005f03
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005ecd 	.word	0x08005ecd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f9de 	bl	800627c <USBD_GetDescriptor>
          break;
 8005ec0:	e024      	b.n	8005f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fb43 	bl	8006550 <USBD_SetAddress>
          break;
 8005eca:	e01f      	b.n	8005f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fb82 	bl	80065d8 <USBD_SetConfig>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ed8:	e018      	b.n	8005f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fc21 	bl	8006724 <USBD_GetConfig>
          break;
 8005ee2:	e013      	b.n	8005f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fc52 	bl	8006790 <USBD_GetStatus>
          break;
 8005eec:	e00e      	b.n	8005f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fc81 	bl	80067f8 <USBD_SetFeature>
          break;
 8005ef6:	e009      	b.n	8005f0c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fc90 	bl	8006820 <USBD_ClrFeature>
          break;
 8005f00:	e004      	b.n	8005f0c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fce7 	bl	80068d8 <USBD_CtlError>
          break;
 8005f0a:	bf00      	nop
      }
      break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fce1 	bl	80068d8 <USBD_CtlError>
      break;
 8005f16:	bf00      	nop
  }

  return ret;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop

08005f24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d005      	beq.n	8005f4a <USBD_StdItfReq+0x26>
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d82f      	bhi.n	8005fa2 <USBD_StdItfReq+0x7e>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <USBD_StdItfReq+0x26>
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d12b      	bne.n	8005fa2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d81d      	bhi.n	8005f94 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	889b      	ldrh	r3, [r3, #4]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d813      	bhi.n	8005f8a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	88db      	ldrh	r3, [r3, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d110      	bne.n	8005f9e <USBD_StdItfReq+0x7a>
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fd56 	bl	8006a34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f88:	e009      	b.n	8005f9e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fca3 	bl	80068d8 <USBD_CtlError>
          break;
 8005f92:	e004      	b.n	8005f9e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fc9e 	bl	80068d8 <USBD_CtlError>
          break;
 8005f9c:	e000      	b.n	8005fa0 <USBD_StdItfReq+0x7c>
          break;
 8005f9e:	bf00      	nop
      }
      break;
 8005fa0:	e004      	b.n	8005fac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fc97 	bl	80068d8 <USBD_CtlError>
      break;
 8005faa:	bf00      	nop
  }

  return ret;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	889b      	ldrh	r3, [r3, #4]
 8005fc8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d007      	beq.n	8005fe6 <USBD_StdEPReq+0x30>
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	f200 8145 	bhi.w	8006266 <USBD_StdEPReq+0x2b0>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00c      	beq.n	8005ffa <USBD_StdEPReq+0x44>
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	f040 8140 	bne.w	8006266 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff8:	e13a      	b.n	8006270 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d007      	beq.n	8006012 <USBD_StdEPReq+0x5c>
 8006002:	2b03      	cmp	r3, #3
 8006004:	f300 8129 	bgt.w	800625a <USBD_StdEPReq+0x2a4>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d07f      	beq.n	800610c <USBD_StdEPReq+0x156>
 800600c:	2b01      	cmp	r3, #1
 800600e:	d03c      	beq.n	800608a <USBD_StdEPReq+0xd4>
 8006010:	e123      	b.n	800625a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d002      	beq.n	8006024 <USBD_StdEPReq+0x6e>
 800601e:	2b03      	cmp	r3, #3
 8006020:	d016      	beq.n	8006050 <USBD_StdEPReq+0x9a>
 8006022:	e02c      	b.n	800607e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <USBD_StdEPReq+0x90>
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b80      	cmp	r3, #128	; 0x80
 800602e:	d00a      	beq.n	8006046 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f841 	bl	80070bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f83d 	bl	80070bc <USBD_LL_StallEP>
 8006042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006044:	e020      	b.n	8006088 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fc45 	bl	80068d8 <USBD_CtlError>
              break;
 800604e:	e01b      	b.n	8006088 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10e      	bne.n	8006076 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <USBD_StdEPReq+0xc0>
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d008      	beq.n	8006076 <USBD_StdEPReq+0xc0>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	88db      	ldrh	r3, [r3, #6]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f823 	bl	80070bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fcdc 	bl	8006a34 <USBD_CtlSendStatus>

              break;
 800607c:	e004      	b.n	8006088 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fc29 	bl	80068d8 <USBD_CtlError>
              break;
 8006086:	bf00      	nop
          }
          break;
 8006088:	e0ec      	b.n	8006264 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d002      	beq.n	800609c <USBD_StdEPReq+0xe6>
 8006096:	2b03      	cmp	r3, #3
 8006098:	d016      	beq.n	80060c8 <USBD_StdEPReq+0x112>
 800609a:	e030      	b.n	80060fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00d      	beq.n	80060be <USBD_StdEPReq+0x108>
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b80      	cmp	r3, #128	; 0x80
 80060a6:	d00a      	beq.n	80060be <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 f805 	bl	80070bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 f801 	bl	80070bc <USBD_LL_StallEP>
 80060ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060bc:	e025      	b.n	800610a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fc09 	bl	80068d8 <USBD_CtlError>
              break;
 80060c6:	e020      	b.n	800610a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	885b      	ldrh	r3, [r3, #2]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d11b      	bne.n	8006108 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 f80b 	bl	80070fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fca5 	bl	8006a34 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
 80060f8:	4603      	mov	r3, r0
 80060fa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80060fc:	e004      	b.n	8006108 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fbe9 	bl	80068d8 <USBD_CtlError>
              break;
 8006106:	e000      	b.n	800610a <USBD_StdEPReq+0x154>
              break;
 8006108:	bf00      	nop
          }
          break;
 800610a:	e0ab      	b.n	8006264 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d002      	beq.n	800611e <USBD_StdEPReq+0x168>
 8006118:	2b03      	cmp	r3, #3
 800611a:	d032      	beq.n	8006182 <USBD_StdEPReq+0x1cc>
 800611c:	e097      	b.n	800624e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <USBD_StdEPReq+0x17e>
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d004      	beq.n	8006134 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fbd3 	bl	80068d8 <USBD_CtlError>
                break;
 8006132:	e091      	b.n	8006258 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006138:	2b00      	cmp	r3, #0
 800613a:	da0b      	bge.n	8006154 <USBD_StdEPReq+0x19e>
 800613c:	7bbb      	ldrb	r3, [r7, #14]
 800613e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	3310      	adds	r3, #16
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4413      	add	r3, r2
 8006150:	3304      	adds	r3, #4
 8006152:	e00b      	b.n	800616c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	3304      	adds	r3, #4
 800616c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2202      	movs	r2, #2
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fc1d 	bl	80069ba <USBD_CtlSendData>
              break;
 8006180:	e06a      	b.n	8006258 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006186:	2b00      	cmp	r3, #0
 8006188:	da11      	bge.n	80061ae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	f003 020f 	and.w	r2, r3, #15
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	3324      	adds	r3, #36	; 0x24
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d117      	bne.n	80061d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fb96 	bl	80068d8 <USBD_CtlError>
                  break;
 80061ac:	e054      	b.n	8006258 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061ae:	7bbb      	ldrb	r3, [r7, #14]
 80061b0:	f003 020f 	and.w	r2, r3, #15
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fb83 	bl	80068d8 <USBD_CtlError>
                  break;
 80061d2:	e041      	b.n	8006258 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da0b      	bge.n	80061f4 <USBD_StdEPReq+0x23e>
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	3310      	adds	r3, #16
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	3304      	adds	r3, #4
 80061f2:	e00b      	b.n	800620c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	3304      	adds	r3, #4
 800620c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <USBD_StdEPReq+0x264>
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d103      	bne.n	8006222 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e00e      	b.n	8006240 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 ff86 	bl	8007138 <USBD_LL_IsStallEP>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e002      	b.n	8006240 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2202      	movs	r2, #2
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fbb7 	bl	80069ba <USBD_CtlSendData>
              break;
 800624c:	e004      	b.n	8006258 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fb41 	bl	80068d8 <USBD_CtlError>
              break;
 8006256:	bf00      	nop
          }
          break;
 8006258:	e004      	b.n	8006264 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb3b 	bl	80068d8 <USBD_CtlError>
          break;
 8006262:	bf00      	nop
      }
      break;
 8006264:	e004      	b.n	8006270 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fb35 	bl	80068d8 <USBD_CtlError>
      break;
 800626e:	bf00      	nop
  }

  return ret;
 8006270:	7bfb      	ldrb	r3, [r7, #15]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	885b      	ldrh	r3, [r3, #2]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	2b06      	cmp	r3, #6
 800629e:	f200 8128 	bhi.w	80064f2 <USBD_GetDescriptor+0x276>
 80062a2:	a201      	add	r2, pc, #4	; (adr r2, 80062a8 <USBD_GetDescriptor+0x2c>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	080064f3 	.word	0x080064f3
 80062b8:	080064f3 	.word	0x080064f3
 80062bc:	08006493 	.word	0x08006493
 80062c0:	080064bf 	.word	0x080064bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	7c12      	ldrb	r2, [r2, #16]
 80062d0:	f107 0108 	add.w	r1, r7, #8
 80062d4:	4610      	mov	r0, r2
 80062d6:	4798      	blx	r3
 80062d8:	60f8      	str	r0, [r7, #12]
      break;
 80062da:	e112      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	7c1b      	ldrb	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10d      	bne.n	8006300 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	f107 0208 	add.w	r2, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3301      	adds	r3, #1
 80062fa:	2202      	movs	r2, #2
 80062fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062fe:	e100      	b.n	8006502 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	f107 0208 	add.w	r2, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	2202      	movs	r2, #2
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	e0f2      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	885b      	ldrh	r3, [r3, #2]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b05      	cmp	r3, #5
 8006324:	f200 80ac 	bhi.w	8006480 <USBD_GetDescriptor+0x204>
 8006328:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <USBD_GetDescriptor+0xb4>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006349 	.word	0x08006349
 8006334:	0800637d 	.word	0x0800637d
 8006338:	080063b1 	.word	0x080063b1
 800633c:	080063e5 	.word	0x080063e5
 8006340:	08006419 	.word	0x08006419
 8006344:	0800644d 	.word	0x0800644d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7c12      	ldrb	r2, [r2, #16]
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800636a:	e091      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fab2 	bl	80068d8 <USBD_CtlError>
            err++;
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	3301      	adds	r3, #1
 8006378:	72fb      	strb	r3, [r7, #11]
          break;
 800637a:	e089      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7c12      	ldrb	r2, [r2, #16]
 8006394:	f107 0108 	add.w	r1, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639e:	e077      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa98 	bl	80068d8 <USBD_CtlError>
            err++;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	3301      	adds	r3, #1
 80063ac:	72fb      	strb	r3, [r7, #11]
          break;
 80063ae:	e06f      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	7c12      	ldrb	r2, [r2, #16]
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063d2:	e05d      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa7e 	bl	80068d8 <USBD_CtlError>
            err++;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	3301      	adds	r3, #1
 80063e0:	72fb      	strb	r3, [r7, #11]
          break;
 80063e2:	e055      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	7c12      	ldrb	r2, [r2, #16]
 80063fc:	f107 0108 	add.w	r1, r7, #8
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
 8006404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006406:	e043      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa64 	bl	80068d8 <USBD_CtlError>
            err++;
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	3301      	adds	r3, #1
 8006414:	72fb      	strb	r3, [r7, #11]
          break;
 8006416:	e03b      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	7c12      	ldrb	r2, [r2, #16]
 8006430:	f107 0108 	add.w	r1, r7, #8
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800643a:	e029      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa4a 	bl	80068d8 <USBD_CtlError>
            err++;
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	3301      	adds	r3, #1
 8006448:	72fb      	strb	r3, [r7, #11]
          break;
 800644a:	e021      	b.n	8006490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	7c12      	ldrb	r2, [r2, #16]
 8006464:	f107 0108 	add.w	r1, r7, #8
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646e:	e00f      	b.n	8006490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa30 	bl	80068d8 <USBD_CtlError>
            err++;
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	3301      	adds	r3, #1
 800647c:	72fb      	strb	r3, [r7, #11]
          break;
 800647e:	e007      	b.n	8006490 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa28 	bl	80068d8 <USBD_CtlError>
          err++;
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	3301      	adds	r3, #1
 800648c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800648e:	bf00      	nop
      }
      break;
 8006490:	e037      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7c1b      	ldrb	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	f107 0208 	add.w	r2, r7, #8
 80064a6:	4610      	mov	r0, r2
 80064a8:	4798      	blx	r3
 80064aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064ac:	e029      	b.n	8006502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa11 	bl	80068d8 <USBD_CtlError>
        err++;
 80064b6:	7afb      	ldrb	r3, [r7, #11]
 80064b8:	3301      	adds	r3, #1
 80064ba:	72fb      	strb	r3, [r7, #11]
      break;
 80064bc:	e021      	b.n	8006502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7c1b      	ldrb	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10d      	bne.n	80064e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	f107 0208 	add.w	r2, r7, #8
 80064d2:	4610      	mov	r0, r2
 80064d4:	4798      	blx	r3
 80064d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	2207      	movs	r2, #7
 80064de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064e0:	e00f      	b.n	8006502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9f7 	bl	80068d8 <USBD_CtlError>
        err++;
 80064ea:	7afb      	ldrb	r3, [r7, #11]
 80064ec:	3301      	adds	r3, #1
 80064ee:	72fb      	strb	r3, [r7, #11]
      break;
 80064f0:	e007      	b.n	8006502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f9ef 	bl	80068d8 <USBD_CtlError>
      err++;
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	3301      	adds	r3, #1
 80064fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006500:	bf00      	nop
  }

  if (err != 0U)
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11e      	bne.n	8006546 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	88db      	ldrh	r3, [r3, #6]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d016      	beq.n	800653e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006510:	893b      	ldrh	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	88da      	ldrh	r2, [r3, #6]
 800651a:	893b      	ldrh	r3, [r7, #8]
 800651c:	4293      	cmp	r3, r2
 800651e:	bf28      	it	cs
 8006520:	4613      	movcs	r3, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006526:	893b      	ldrh	r3, [r7, #8]
 8006528:	461a      	mov	r2, r3
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa44 	bl	80069ba <USBD_CtlSendData>
 8006532:	e009      	b.n	8006548 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9ce 	bl	80068d8 <USBD_CtlError>
 800653c:	e004      	b.n	8006548 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa78 	bl	8006a34 <USBD_CtlSendStatus>
 8006544:	e000      	b.n	8006548 <USBD_GetDescriptor+0x2cc>
    return;
 8006546:	bf00      	nop
  }
}
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop

08006550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	889b      	ldrh	r3, [r3, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d131      	bne.n	80065c6 <USBD_SetAddress+0x76>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	88db      	ldrh	r3, [r3, #6]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d12d      	bne.n	80065c6 <USBD_SetAddress+0x76>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	2b7f      	cmp	r3, #127	; 0x7f
 8006570:	d829      	bhi.n	80065c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	885b      	ldrh	r3, [r3, #2]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800657c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b03      	cmp	r3, #3
 8006588:	d104      	bne.n	8006594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f9a3 	bl	80068d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006592:	e01d      	b.n	80065d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	7bfa      	ldrb	r2, [r7, #15]
 8006598:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fdf5 	bl	8007190 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa44 	bl	8006a34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ba:	e009      	b.n	80065d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c4:	e004      	b.n	80065d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f985 	bl	80068d8 <USBD_CtlError>
  }
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	885b      	ldrh	r3, [r3, #2]
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	4b4c      	ldr	r3, [pc, #304]	; (8006720 <USBD_SetConfig+0x148>)
 80065ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065f0:	4b4b      	ldr	r3, [pc, #300]	; (8006720 <USBD_SetConfig+0x148>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d905      	bls.n	8006604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f96c 	bl	80068d8 <USBD_CtlError>
    return USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	e088      	b.n	8006716 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d002      	beq.n	8006616 <USBD_SetConfig+0x3e>
 8006610:	2b03      	cmp	r3, #3
 8006612:	d025      	beq.n	8006660 <USBD_SetConfig+0x88>
 8006614:	e071      	b.n	80066fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006616:	4b42      	ldr	r3, [pc, #264]	; (8006720 <USBD_SetConfig+0x148>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01c      	beq.n	8006658 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800661e:	4b40      	ldr	r3, [pc, #256]	; (8006720 <USBD_SetConfig+0x148>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006628:	4b3d      	ldr	r3, [pc, #244]	; (8006720 <USBD_SetConfig+0x148>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff f948 	bl	80058c4 <USBD_SetClassConfig>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f949 	bl	80068d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006646:	e065      	b.n	8006714 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f9f3 	bl	8006a34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2203      	movs	r2, #3
 8006652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006656:	e05d      	b.n	8006714 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f9eb 	bl	8006a34 <USBD_CtlSendStatus>
      break;
 800665e:	e059      	b.n	8006714 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006660:	4b2f      	ldr	r3, [pc, #188]	; (8006720 <USBD_SetConfig+0x148>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d112      	bne.n	800668e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006670:	4b2b      	ldr	r3, [pc, #172]	; (8006720 <USBD_SetConfig+0x148>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800667a:	4b29      	ldr	r3, [pc, #164]	; (8006720 <USBD_SetConfig+0x148>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff f93b 	bl	80058fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9d4 	bl	8006a34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800668c:	e042      	b.n	8006714 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800668e:	4b24      	ldr	r3, [pc, #144]	; (8006720 <USBD_SetConfig+0x148>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d02a      	beq.n	80066f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff f929 	bl	80058fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <USBD_SetConfig+0x148>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <USBD_SetConfig+0x148>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff f902 	bl	80058c4 <USBD_SetClassConfig>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00f      	beq.n	80066ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f903 	bl	80068d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff f90e 	bl	80058fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066e8:	e014      	b.n	8006714 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9a2 	bl	8006a34 <USBD_CtlSendStatus>
      break;
 80066f0:	e010      	b.n	8006714 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f99e 	bl	8006a34 <USBD_CtlSendStatus>
      break;
 80066f8:	e00c      	b.n	8006714 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f8eb 	bl	80068d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006702:	4b07      	ldr	r3, [pc, #28]	; (8006720 <USBD_SetConfig+0x148>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff f8f7 	bl	80058fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	73fb      	strb	r3, [r7, #15]
      break;
 8006712:	bf00      	nop
  }

  return ret;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000180 	.word	0x20000180

08006724 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	88db      	ldrh	r3, [r3, #6]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d004      	beq.n	8006740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f8cd 	bl	80068d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800673e:	e023      	b.n	8006788 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	dc02      	bgt.n	8006752 <USBD_GetConfig+0x2e>
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc03      	bgt.n	8006758 <USBD_GetConfig+0x34>
 8006750:	e015      	b.n	800677e <USBD_GetConfig+0x5a>
 8006752:	2b03      	cmp	r3, #3
 8006754:	d00b      	beq.n	800676e <USBD_GetConfig+0x4a>
 8006756:	e012      	b.n	800677e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3308      	adds	r3, #8
 8006762:	2201      	movs	r2, #1
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f927 	bl	80069ba <USBD_CtlSendData>
        break;
 800676c:	e00c      	b.n	8006788 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	2201      	movs	r2, #1
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f91f 	bl	80069ba <USBD_CtlSendData>
        break;
 800677c:	e004      	b.n	8006788 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f8a9 	bl	80068d8 <USBD_CtlError>
        break;
 8006786:	bf00      	nop
}
 8006788:	bf00      	nop
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d81e      	bhi.n	80067e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	88db      	ldrh	r3, [r3, #6]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d004      	beq.n	80067ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f890 	bl	80068d8 <USBD_CtlError>
        break;
 80067b8:	e01a      	b.n	80067f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f043 0202 	orr.w	r2, r3, #2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	330c      	adds	r3, #12
 80067da:	2202      	movs	r2, #2
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f8eb 	bl	80069ba <USBD_CtlSendData>
      break;
 80067e4:	e004      	b.n	80067f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f875 	bl	80068d8 <USBD_CtlError>
      break;
 80067ee:	bf00      	nop
  }
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	885b      	ldrh	r3, [r3, #2]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d106      	bne.n	8006818 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f90e 	bl	8006a34 <USBD_CtlSendStatus>
  }
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006830:	b2db      	uxtb	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	2b02      	cmp	r3, #2
 8006836:	d80b      	bhi.n	8006850 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	885b      	ldrh	r3, [r3, #2]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d10c      	bne.n	800685a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f8f3 	bl	8006a34 <USBD_CtlSendStatus>
      }
      break;
 800684e:	e004      	b.n	800685a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f840 	bl	80068d8 <USBD_CtlError>
      break;
 8006858:	e000      	b.n	800685c <USBD_ClrFeature+0x3c>
      break;
 800685a:	bf00      	nop
  }
}
 800685c:	bf00      	nop
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fabb 	bl	8005e0a <SWAPBYTE>
 8006894:	4603      	mov	r3, r0
 8006896:	461a      	mov	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff faae 	bl	8005e0a <SWAPBYTE>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f7ff faa1 	bl	8005e0a <SWAPBYTE>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	80da      	strh	r2, [r3, #6]
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fbe9 	bl	80070bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068ea:	2100      	movs	r1, #0
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fbe5 	bl	80070bc <USBD_LL_StallEP>
}
 80068f2:	bf00      	nop
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d036      	beq.n	800697e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006914:	6938      	ldr	r0, [r7, #16]
 8006916:	f000 f836 	bl	8006986 <USBD_GetLen>
 800691a:	4603      	mov	r3, r0
 800691c:	3301      	adds	r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	701a      	strb	r2, [r3, #0]
  idx++;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	3301      	adds	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	4413      	add	r3, r2
 8006940:	2203      	movs	r2, #3
 8006942:	701a      	strb	r2, [r3, #0]
  idx++;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	3301      	adds	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800694a:	e013      	b.n	8006974 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4413      	add	r3, r2
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3301      	adds	r3, #1
 800695c:	613b      	str	r3, [r7, #16]
    idx++;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
 8006960:	3301      	adds	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
    idx++;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	3301      	adds	r3, #1
 8006972:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1e7      	bne.n	800694c <USBD_GetString+0x52>
 800697c:	e000      	b.n	8006980 <USBD_GetString+0x86>
    return;
 800697e:	bf00      	nop
  }
}
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006996:	e005      	b.n	80069a4 <USBD_GetLen+0x1e>
  {
    len++;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	3301      	adds	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f5      	bne.n	8006998 <USBD_GetLen+0x12>
  }

  return len;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2202      	movs	r2, #2
 80069ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	2100      	movs	r1, #0
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fbf4 	bl	80071ce <USBD_LL_Transmit>

  return USBD_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	2100      	movs	r1, #0
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fbe3 	bl	80071ce <USBD_LL_Transmit>

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	2100      	movs	r1, #0
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fbf3 	bl	8007210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a44:	2300      	movs	r3, #0
 8006a46:	2200      	movs	r2, #0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fbbf 	bl	80071ce <USBD_LL_Transmit>

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2205      	movs	r2, #5
 8006a66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2100      	movs	r1, #0
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fbcd 	bl	8007210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a84:	2200      	movs	r2, #0
 8006a86:	490e      	ldr	r1, [pc, #56]	; (8006ac0 <MX_USB_DEVICE_Init+0x40>)
 8006a88:	480e      	ldr	r0, [pc, #56]	; (8006ac4 <MX_USB_DEVICE_Init+0x44>)
 8006a8a:	f7fe fead 	bl	80057e8 <USBD_Init>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a94:	f7f9 ffde 	bl	8000a54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006a98:	490b      	ldr	r1, [pc, #44]	; (8006ac8 <MX_USB_DEVICE_Init+0x48>)
 8006a9a:	480a      	ldr	r0, [pc, #40]	; (8006ac4 <MX_USB_DEVICE_Init+0x44>)
 8006a9c:	f7fe fed4 	bl	8005848 <USBD_RegisterClass>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006aa6:	f7f9 ffd5 	bl	8000a54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006aaa:	4806      	ldr	r0, [pc, #24]	; (8006ac4 <MX_USB_DEVICE_Init+0x44>)
 8006aac:	f7fe fef3 	bl	8005896 <USBD_Start>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006ab6:	f7f9 ffcd 	bl	8000a54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000108 	.word	0x20000108
 8006ac4:	200002b8 	.word	0x200002b8
 8006ac8:	2000000c 	.word	0x2000000c

08006acc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	6039      	str	r1, [r7, #0]
 8006ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2212      	movs	r2, #18
 8006adc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ade:	4b03      	ldr	r3, [pc, #12]	; (8006aec <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	20000124 	.word	0x20000124

08006af0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2204      	movs	r2, #4
 8006b00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b02:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000138 	.word	0x20000138

08006b14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	6039      	str	r1, [r7, #0]
 8006b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d105      	bne.n	8006b32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	4907      	ldr	r1, [pc, #28]	; (8006b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b2a:	4808      	ldr	r0, [pc, #32]	; (8006b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006b2c:	f7ff fee5 	bl	80068fa <USBD_GetString>
 8006b30:	e004      	b.n	8006b3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4904      	ldr	r1, [pc, #16]	; (8006b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b36:	4805      	ldr	r0, [pc, #20]	; (8006b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006b38:	f7ff fedf 	bl	80068fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b3c:	4b02      	ldr	r3, [pc, #8]	; (8006b48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000588 	.word	0x20000588
 8006b4c:	0800734c 	.word	0x0800734c

08006b50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	4904      	ldr	r1, [pc, #16]	; (8006b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b60:	4804      	ldr	r0, [pc, #16]	; (8006b74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b62:	f7ff feca 	bl	80068fa <USBD_GetString>
  return USBD_StrDesc;
 8006b66:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000588 	.word	0x20000588
 8006b74:	0800735c 	.word	0x0800735c

08006b78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	221a      	movs	r2, #26
 8006b88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b8a:	f000 f843 	bl	8006c14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b8e:	4b02      	ldr	r3, [pc, #8]	; (8006b98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	2000013c 	.word	0x2000013c

08006b9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d105      	bne.n	8006bba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	4907      	ldr	r1, [pc, #28]	; (8006bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bb2:	4808      	ldr	r0, [pc, #32]	; (8006bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bb4:	f7ff fea1 	bl	80068fa <USBD_GetString>
 8006bb8:	e004      	b.n	8006bc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4904      	ldr	r1, [pc, #16]	; (8006bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bbe:	4805      	ldr	r0, [pc, #20]	; (8006bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bc0:	f7ff fe9b 	bl	80068fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000588 	.word	0x20000588
 8006bd4:	08007370 	.word	0x08007370

08006bd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	4907      	ldr	r1, [pc, #28]	; (8006c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bee:	4808      	ldr	r0, [pc, #32]	; (8006c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bf0:	f7ff fe83 	bl	80068fa <USBD_GetString>
 8006bf4:	e004      	b.n	8006c00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	4904      	ldr	r1, [pc, #16]	; (8006c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bfa:	4805      	ldr	r0, [pc, #20]	; (8006c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bfc:	f7ff fe7d 	bl	80068fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c00:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000588 	.word	0x20000588
 8006c10:	0800737c 	.word	0x0800737c

08006c14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c1a:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <Get_SerialNum+0x44>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c20:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <Get_SerialNum+0x48>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c26:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <Get_SerialNum+0x4c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	4909      	ldr	r1, [pc, #36]	; (8006c64 <Get_SerialNum+0x50>)
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f814 	bl	8006c6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c44:	2204      	movs	r2, #4
 8006c46:	4908      	ldr	r1, [pc, #32]	; (8006c68 <Get_SerialNum+0x54>)
 8006c48:	68b8      	ldr	r0, [r7, #8]
 8006c4a:	f000 f80f 	bl	8006c6c <IntToUnicode>
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	1fff7a10 	.word	0x1fff7a10
 8006c5c:	1fff7a14 	.word	0x1fff7a14
 8006c60:	1fff7a18 	.word	0x1fff7a18
 8006c64:	2000013e 	.word	0x2000013e
 8006c68:	2000014e 	.word	0x2000014e

08006c6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]
 8006c82:	e027      	b.n	8006cd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	0f1b      	lsrs	r3, r3, #28
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d80b      	bhi.n	8006ca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	0f1b      	lsrs	r3, r3, #28
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4619      	mov	r1, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3230      	adds	r2, #48	; 0x30
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e00a      	b.n	8006cba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0f1b      	lsrs	r3, r3, #28
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3237      	adds	r2, #55	; 0x37
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]
 8006cd4:	7dfa      	ldrb	r2, [r7, #23]
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3d3      	bcc.n	8006c84 <IntToUnicode+0x18>
  }
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d0c:	d13a      	bne.n	8006d84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1e:	4b1b      	ldr	r3, [pc, #108]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d30:	2302      	movs	r3, #2
 8006d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d3c:	230a      	movs	r3, #10
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d40:	f107 0314 	add.w	r3, r7, #20
 8006d44:	4619      	mov	r1, r3
 8006d46:	4812      	ldr	r0, [pc, #72]	; (8006d90 <HAL_PCD_MspInit+0xa4>)
 8006d48:	f7fa f9dc 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	4a0e      	ldr	r2, [pc, #56]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d56:	6353      	str	r3, [r2, #52]	; 0x34
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d60:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d66:	6453      	str	r3, [r2, #68]	; 0x44
 8006d68:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <HAL_PCD_MspInit+0xa0>)
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d74:	2200      	movs	r2, #0
 8006d76:	2100      	movs	r1, #0
 8006d78:	2043      	movs	r0, #67	; 0x43
 8006d7a:	f7fa f98c 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d7e:	2043      	movs	r0, #67	; 0x43
 8006d80:	f7fa f9a5 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d84:	bf00      	nop
 8006d86:	3728      	adds	r7, #40	; 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	40020000 	.word	0x40020000

08006d94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f7fe fdbe 	bl	800592c <USBD_LL_SetupStage>
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006dca:	78fa      	ldrb	r2, [r7, #3]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	4619      	mov	r1, r3
 8006de2:	f7fe fdf8 	bl	80059d6 <USBD_LL_DataOutStage>
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3348      	adds	r3, #72	; 0x48
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	4619      	mov	r1, r3
 8006e16:	f7fe fe41 	bl	8005a9c <USBD_LL_DataInStage>
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe ff55 	bl	8005ce0 <USBD_LL_SOF>
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e46:	2301      	movs	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d001      	beq.n	8006e56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e52:	f7f9 fdff 	bl	8000a54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e5c:	7bfa      	ldrb	r2, [r7, #15]
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe feff 	bl	8005c64 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe feab 	bl	8005bc8 <USBD_LL_Reset>
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fefa 	bl	8005c84 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6812      	ldr	r2, [r2, #0]
 8006e9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ea2:	f043 0301 	orr.w	r3, r3, #1
 8006ea6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006eb0:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <HAL_PCD_SuspendCallback+0x48>)
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	4a03      	ldr	r2, [pc, #12]	; (8006ec4 <HAL_PCD_SuspendCallback+0x48>)
 8006eb6:	f043 0306 	orr.w	r3, r3, #6
 8006eba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	e000ed00 	.word	0xe000ed00

08006ec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe feea 	bl	8005cb0 <USBD_LL_Resume>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	4611      	mov	r1, r2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe ff38 	bl	8005d70 <USBD_LL_IsoOUTIncomplete>
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe ff00 	bl	8005d24 <USBD_LL_IsoINIncomplete>
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe ff3e 	bl	8005dbc <USBD_LL_DevConnected>
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe ff3b 	bl	8005dd2 <USBD_LL_DevDisconnected>
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d13c      	bne.n	8006fee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f74:	4a20      	ldr	r2, [pc, #128]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006f80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f84:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006f86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006f8e:	2204      	movs	r2, #4
 8006f90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f92:	4b19      	ldr	r3, [pc, #100]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006f94:	2202      	movs	r2, #2
 8006f96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f98:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f9e:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006fa4:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006faa:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fb0:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006fc2:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fc4:	f7fa fa5f 	bl	8001486 <HAL_PCD_Init>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006fce:	f7f9 fd41 	bl	8000a54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006fd2:	2180      	movs	r1, #128	; 0x80
 8006fd4:	4808      	ldr	r0, [pc, #32]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fd6:	f7fb fba4 	bl	8002722 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006fda:	2240      	movs	r2, #64	; 0x40
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4806      	ldr	r0, [pc, #24]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fe0:	f7fb fb58 	bl	8002694 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006fe4:	2280      	movs	r2, #128	; 0x80
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4803      	ldr	r0, [pc, #12]	; (8006ff8 <USBD_LL_Init+0x94>)
 8006fea:	f7fb fb53 	bl	8002694 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000788 	.word	0x20000788

08006ffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007012:	4618      	mov	r0, r3
 8007014:	f7fa fb54 	bl	80016c0 <HAL_PCD_Start>
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f930 	bl	8007284 <USBD_Get_USB_Status>
 8007024:	4603      	mov	r3, r0
 8007026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007028:	7bbb      	ldrb	r3, [r7, #14]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	4608      	mov	r0, r1
 800703c:	4611      	mov	r1, r2
 800703e:	461a      	mov	r2, r3
 8007040:	4603      	mov	r3, r0
 8007042:	70fb      	strb	r3, [r7, #3]
 8007044:	460b      	mov	r3, r1
 8007046:	70bb      	strb	r3, [r7, #2]
 8007048:	4613      	mov	r3, r2
 800704a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800705a:	78bb      	ldrb	r3, [r7, #2]
 800705c:	883a      	ldrh	r2, [r7, #0]
 800705e:	78f9      	ldrb	r1, [r7, #3]
 8007060:	f7fa ff38 	bl	8001ed4 <HAL_PCD_EP_Open>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f90a 	bl	8007284 <USBD_Get_USB_Status>
 8007070:	4603      	mov	r3, r0
 8007072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007074:	7bbb      	ldrb	r3, [r7, #14]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f7fa ff81 	bl	8001fa4 <HAL_PCD_EP_Close>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 f8eb 	bl	8007284 <USBD_Get_USB_Status>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fb f841 	bl	8002162 <HAL_PCD_EP_SetStall>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 f8cc 	bl	8007284 <USBD_Get_USB_Status>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f7fb f886 	bl	800222a <HAL_PCD_EP_ClrStall>
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f8ad 	bl	8007284 <USBD_Get_USB_Status>
 800712a:	4603      	mov	r3, r0
 800712c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800712e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800714a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800714c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007150:	2b00      	cmp	r3, #0
 8007152:	da0b      	bge.n	800716c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	333e      	adds	r3, #62	; 0x3e
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	e00b      	b.n	8007184 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007182:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fa fe6b 	bl	8001e8a <HAL_PCD_SetAddress>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f862 	bl	8007284 <USBD_Get_USB_Status>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	460b      	mov	r3, r1
 80071dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80071ec:	7af9      	ldrb	r1, [r7, #11]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	f7fa ff6c 	bl	80020ce <HAL_PCD_EP_Transmit>
 80071f6:	4603      	mov	r3, r0
 80071f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f841 	bl	8007284 <USBD_Get_USB_Status>
 8007202:	4603      	mov	r3, r0
 8007204:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007206:	7dbb      	ldrb	r3, [r7, #22]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	460b      	mov	r3, r1
 800721e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800722e:	7af9      	ldrb	r1, [r7, #11]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	f7fa ff00 	bl	8002038 <HAL_PCD_EP_Receive>
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f820 	bl	8007284 <USBD_Get_USB_Status>
 8007244:	4603      	mov	r3, r0
 8007246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007248:	7dbb      	ldrb	r3, [r7, #22]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800725c:	4b03      	ldr	r3, [pc, #12]	; (800726c <USBD_static_malloc+0x18>)
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20000184 	.word	0x20000184

08007270 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]

}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d817      	bhi.n	80072c8 <USBD_Get_USB_Status+0x44>
 8007298:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <USBD_Get_USB_Status+0x1c>)
 800729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729e:	bf00      	nop
 80072a0:	080072b1 	.word	0x080072b1
 80072a4:	080072b7 	.word	0x080072b7
 80072a8:	080072bd 	.word	0x080072bd
 80072ac:	080072c3 	.word	0x080072c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
    break;
 80072b4:	e00b      	b.n	80072ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072b6:	2303      	movs	r3, #3
 80072b8:	73fb      	strb	r3, [r7, #15]
    break;
 80072ba:	e008      	b.n	80072ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
    break;
 80072c0:	e005      	b.n	80072ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	73fb      	strb	r3, [r7, #15]
    break;
 80072c6:	e002      	b.n	80072ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072c8:	2303      	movs	r3, #3
 80072ca:	73fb      	strb	r3, [r7, #15]
    break;
 80072cc:	bf00      	nop
  }
  return usb_status;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4d0d      	ldr	r5, [pc, #52]	; (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	; (8007318 <__libc_init_array+0x3c>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2600      	movs	r6, #0
 80072e8:	42a6      	cmp	r6, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4d0b      	ldr	r5, [pc, #44]	; (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	; (8007320 <__libc_init_array+0x44>)
 80072f0:	f000 f820 	bl	8007334 <_init>
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2600      	movs	r6, #0
 80072fa:	42a6      	cmp	r6, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f855 3b04 	ldr.w	r3, [r5], #4
 8007304:	4798      	blx	r3
 8007306:	3601      	adds	r6, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f855 3b04 	ldr.w	r3, [r5], #4
 800730e:	4798      	blx	r3
 8007310:	3601      	adds	r6, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	080073ac 	.word	0x080073ac
 8007318:	080073ac 	.word	0x080073ac
 800731c:	080073ac 	.word	0x080073ac
 8007320:	080073b0 	.word	0x080073b0

08007324 <memset>:
 8007324:	4402      	add	r2, r0
 8007326:	4603      	mov	r3, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <_init>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	bf00      	nop
 8007338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733a:	bc08      	pop	{r3}
 800733c:	469e      	mov	lr, r3
 800733e:	4770      	bx	lr

08007340 <_fini>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr
